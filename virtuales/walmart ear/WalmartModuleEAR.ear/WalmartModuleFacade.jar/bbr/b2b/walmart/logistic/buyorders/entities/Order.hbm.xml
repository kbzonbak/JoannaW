<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
	Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
	<class name="bbr.b2b.walmart.logistic.buyorders.entities.Order" table="ORDER"
		entity-name="bbr.b2b.walmart.logistic.buyorders.entities.Order" schema="LOGISTICA" >
		<id name="id" type="java.lang.Long">
			<column name="ID" />
			<generator class="identity">
				<param name="sequence">ORDER_SEQUENCE</param>
				<param name="parameters">AS BIGINT CACHE 100</param>
			</generator>
		</id>
		<property name="number" type="java.lang.String" not-null="true"></property>		
		<property name="deliverydate" type="timestamp"></property>
		<property name="emitteddate" type="timestamp"></property>
		<property name="syncdate" type="timestamp"></property>		
		<property name="needunits" type="java.lang.Double" not-null="true"></property>
		<property name="receivedunits" type="java.lang.Double" not-null="true"></property>
		<property name="deliverto" type="java.lang.String" ></property>	
		<property name="status" type="java.lang.String" ></property>
		<property name="soastatetypedate" type="timestamp"></property>
		<property name="commitmentdate" type="timestamp"></property>
		<property name="expirationdate" type="timestamp"></property>		

		<many-to-one name="buyer"
			class="bbr.b2b.walmart.logistic.buyorders.entities.Buyer"
			column="BUYER_ID" not-null="true" />
		<many-to-one name="vendor"
			class="bbr.b2b.walmart.logistic.vendors.entities.Vendor"
			column="VENDOR_ID" not-null="true" />
		<many-to-one name="deliverylocation"
			class="bbr.b2b.walmart.logistic.locations.entities.Location"
			column="DELIVERYLOCATION_ID" not-null="false" />
		<many-to-one name="client"
			class="bbr.b2b.walmart.logistic.clients.entities.Client"
			column="CLIENT_ID" not-null="false" />
			
		<many-to-one name="soastatetype"
			class="bbr.b2b.walmart.logistic.soa.entities.SOAStateType"
			column="SOASTATETYPE_ID" not-null="true" />
			
		<many-to-one name="ordertype"
			class="bbr.b2b.walmart.logistic.buyorders.entities.OrderType"
			column="ORDERTYPE_ID" not-null="true" />

		<sql-query name="doCreateTempTableExcelData">
			<![CDATA[               
				CREATE TEMP TABLE excelwalmartdata
			 	( 	id	INTEGER,
			 		ocnumber VARCHAR,
					deliverydate VARCHAR,
					line VARCHAR,
					locationcode VARCHAR,
					locationname VARCHAR,
					customerid VARCHAR,
					itemcode VARCHAR,
					itemdescription VARCHAR,
					upcemcd VARCHAR,
					packagecode VARCHAR,
					upc VARCHAR,
					packagedescription VARCHAR,
					needqty VARCHAR,
					emcdqty VARCHAR,
					receivedqty	VARCHAR,
					buyercode VARCHAR,
					vendorcode VARCHAR,
					filename VARCHAR,
					isneworder BOOLEAN,
					isexistentorder BOOLEAN,
					isreceptiononfile BOOLEAN
				) ON COMMIT DROP;
			]]>
		</sql-query>

		<!-- Validate Requiered data  -->
		<sql-query name="doCheckOcNumber">
			<![CDATA[        
				SELECT id from excelwalmartdata where ocnumber is null;		
			]]>
		</sql-query>

		<sql-query name="doCheckDeliveryDate">
			<![CDATA[        
				SELECT id from excelwalmartdata where deliverydate is null;
			]]>
			
		</sql-query>
				<sql-query name="doCheckLine">
			<![CDATA[        
				SELECT id from excelwalmartdata where line is null;
			]]>
		</sql-query>
		
		<sql-query name="doCheckLocationCode">
			<![CDATA[        
				SELECT id from excelwalmartdata where locationcode is null;	
			]]>
		</sql-query>
				
		<sql-query name="doCheckLocationName">
			<![CDATA[        
				SELECT id from excelwalmartdata where locationname is null				
			]]>
		</sql-query>
				
		<sql-query name="doCheckItemCode">
			<![CDATA[        
				SELECT id from excelwalmartdata where itemcode is null
			]]>
		</sql-query>
				
		<sql-query name="doCheckItemDescription">
			<![CDATA[        
				SELECT id from excelwalmartdata where itemdescription is null		
			]]>
		</sql-query>
				
		<sql-query name="doCheckPackageCode">
			<![CDATA[        
				SELECT id from excelwalmartdata where packagecode is null	
			]]>
		</sql-query>
		
		<sql-query name="doCheckPakageDesc">
			<![CDATA[        
				SELECT id from excelwalmartdata where packagedescription is null
			]]>
		</sql-query>
				
		<sql-query name="doCheckNeedQty">
			<![CDATA[        
				SELECT id from excelwalmartdata where needqty is null	
			]]>
		</sql-query>
		
		<sql-query name="doCheckReceivedQty">
			<![CDATA[        
				SELECT id from excelwalmartdata where receivedqty is null	
			]]>
		</sql-query>
		
		
		<sql-query name="doDeleteOrdersWithMissingData">
			<![CDATA[
				DELETE FROM excelwalmartdata 
				WHERE ocnumber in (
					select distinct(wd.ocnumber)
					from excelwalmartdata as wd
					where wd.id IN (:ids)
				)
		
			]]>
		</sql-query>
		
		
		
		<!-- Valida que el archivo no contenga items con la descripcion distinta -->
		<sql-query name="doCheckUniqueItems" >
			<![CDATA[				
				WITH foo1 as(
					select itemcode, itemdescription
					from excelwalmartdata
					group by itemcode, itemdescription 
				) 
				select itemcode
				from foo1
				group by itemcode
				having count(1) >1			
			]]>
		</sql-query>
		
		<!--	Borra de la tabla temporal las lineas asociadas a ordenes que
				contienen item con problemas
		 -->
		<sql-query name="doDeleteOrdersWithItemsProblems">
			<![CDATA[
				DELETE FROM excelwalmartdata 
				WHERE ocnumber in (
					select distinct(wd.ocnumber)
					from excelwalmartdata as wd
					where wd.itemcode IN (:itemcodes)
				)
			]]>
		</sql-query>
		
		<!--	Busca locations que tengan distintos nombres asociados
				para un mismo codigo
		 -->
		<sql-query name="doCheckUniqueLocations">
			<![CDATA[
				WITH foo1 as(
					select locationcode, locationname
					from excelwalmartdata
					group by locationcode, locationname
				) 
				select locationcode
				from foo1
				group by locationcode
				having count(1) >1	

			]]>
		</sql-query>

		
		<sql-query name="doDeleteOrdersWithLocationProblems">
			<![CDATA[
				DELETE FROM excelwalmartdata 
				WHERE ocnumber in (
					select distinct(wd.ocnumber)
					from excelwalmartdata as wd
					where wd.locationcode IN (:locationcodes)
				)
			]]>
		</sql-query>
		

		<!--***************************************************************************************-->
		<sql-query name="doGetNewItemsCodes">
			<![CDATA[
				SELECT wd.itemcode
				FROM excelwalmartdata as wd
				LEFT JOIN logistica.item as item
				ON wd.itemcode = item.code
				WHERE  
				wd.itemcode is not null 
				and wd.itemdescription is not null
				and item.code is null
				GROUP BY wd.itemcode, wd.itemdescription, item.code
			]]>
		</sql-query>

		<sql-query name="doAddItems">
			<![CDATA[
				INSERT INTO logistica.item(code, description, innerpack)
					SELECT wd.itemcode, wd.itemdescription, 1
					FROM excelwalmartdata as wd
					LEFT JOIN logistica.item as item
					ON wd.itemcode = item.code
					WHERE wd.itemcode is NOT NULL 
					AND wd.itemdescription is NOT NULL
					AND item.code is NULL
					GROUP BY wd.itemcode, wd.itemdescription, item.code;
			]]>
		</sql-query>

		<sql-query name="doAddVendorItems">
			<![CDATA[
				INSERT INTO logistica.vendoritem (item_id, vendor_id)
				SELECT it.id as itemid, 
				ve.id as vendorid
				FROM excelwalmartdata as wd,
				logistica.item as it,
				logistica.vendor as ve
				WHERE 
				wd.vendorcode = ve.code
				AND wd.itemcode = it.code
				AND it.code IN (:itemcodes)
				GROUP BY  it.id, ve.id
			]]>
		</sql-query>

		<sql-query name="doAddLocations">
			<![CDATA[
				INSERT INTO logistica.location(code, name)
				SELECT wd.locationcode, wd.locationname
				FROM excelwalmartdata as wd
				LEFT JOIN logistica.location AS loc
				ON wd.locationcode = loc.code
				WHERE  
				wd.locationcode IS NOT NULL 
				and wd.locationname IS NOT NULL
				and loc.code IS NULL
				GROUP BY wd.locationcode, wd.locationname, loc.code
			]]>
		</sql-query>
		
		<sql-query name="doGetNewOrderNbrs">
			<![CDATA[
				SELECT wd.ocnumber as ordernbr, wd.vendorcode, wd.buyercode
				FROM excelwalmartdata as wd
				LEFT JOIN logistica.order as oc
				on wd.ocnumber = oc.number
				left join logistica.vendor as ve
				on oc.vendor_id = ve.id
				left join logistica.buyer as bu
				on oc.buyer_id = bu.id
				WHERE
				wd.ocnumber is not null 
				AND (wd.vendorcode != ve.code OR oc.vendor_id IS NULL 
				     OR wd.buyercode != bu.code OR oc.buyer_id IS NULL)
				GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode
			]]>
		</sql-query>
		
		<sql-query name="doUpdateNewOrderNbrs">
			<![CDATA[
				WITH FOO AS (
					SELECT wd.ocnumber as ordernbr, wd.vendorcode, wd.buyercode
					FROM excelwalmartdata as wd
					LEFT JOIN logistica.order as oc
					on wd.ocnumber = oc.number
					left join logistica.vendor as ve
					on oc.vendor_id = ve.id
					left join logistica.buyer as bu
					on oc.buyer_id = bu.id
					WHERE
					wd.ocnumber is not null 
					AND (wd.vendorcode != ve.code OR oc.vendor_id IS NULL 
					     OR wd.buyercode != bu.code OR oc.buyer_id IS NULL)
					GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode
				)
				UPDATE excelwalmartdata as wd
				SET isneworder = TRUE
				FROM foo
				WHERE wd.ocnumber = foo.ordernbr
				AND wd.vendorcode = foo.vendorcode
				AND wd.buyercode = foo.buyercode
			]]>
		</sql-query>
		
		
		<sql-query name="doGetExistentOrderNbrs">
			<![CDATA[
				SELECT wd.ocnumber as ordernbr , wd.vendorcode, wd.buyercode
				FROM excelwalmartdata as wd
				LEFT JOIN logistica.order as oc
				on wd.ocnumber = oc.number
				left join logistica.vendor as ve
				on oc.vendor_id = ve.id
				left join logistica.buyer as bu
				on oc.buyer_id = bu.id
				
				WHERE
				wd.ocnumber is not null 
				AND wd.vendorcode = ve.code 
				AND wd.buyercode = bu.code
				GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode
			]]>
		</sql-query>
		
		<sql-query name="doUpdateExistentOrderNbrs">
			<![CDATA[
				WITH FOO AS (			
					SELECT wd.ocnumber as ordernbr , wd.vendorcode, wd.buyercode
					FROM excelwalmartdata as wd
					LEFT JOIN logistica.order as oc
					on wd.ocnumber = oc.number
					left join logistica.vendor as ve
					on oc.vendor_id = ve.id
					left join logistica.buyer as bu
					on oc.buyer_id = bu.id
					
					WHERE
					wd.ocnumber is not null 
					AND wd.vendorcode = ve.code 
					AND wd.buyercode = bu.code
					GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode
				)
				UPDATE excelwalmartdata as wd
				SET isexistentorder = TRUE
				FROM foo
				WHERE wd.ocnumber = foo.ordernbr
				AND wd.vendorcode = foo.vendorcode
				AND wd.buyercode = foo.buyercode
			]]>
		</sql-query>
		

		<!-- La primera parte de la query determina si la orden tiene mas de una
			ubicación aociada en el archivo. 
			El resto carga las ordenes considerando los distintos proveedores y retail (si existieran)
		-->
		<sql-query name="doAddOrder">
			<![CDATA[
			
			WITH foo1 AS (
				SELECT wd.ocnumber, wd.vendorcode, wd.buyercode, wd.locationcode
				FROM excelwalmartdata as wd
				GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode,  wd.locationcode
				),

			foo2 as (
				SELECT ocnumber, vendorcode, buyercode, count(locationcode) as loccount
				FROM foo1
				GROUP BY ocnumber ,vendorcode, buyercode
				),

			foo3 as (
				select foo2.ocnumber, foo2.vendorcode, foo2.buyercode, 
				CASE WHEN foo2.loccount = 1 
				THEN loc.id
					ELSE NULL
				END as location_id
				
				from foo2,
				excelwalmartdata as wd,
				logistica.location as loc
				where wd.ocnumber = foo2.ocnumber
				AND wd.vendorcode = foo2.vendorcode
				AND wd.buyercode = foo2.buyercode
				AND wd.locationcode = loc.code
				group by foo2.ocnumber, foo2.vendorcode, foo2.buyercode, foo2.loccount , loc.id
			),

			foo4 as (
				select foo3.ocnumber, foo3.vendorcode, foo3.buyercode, foo3.location_id
				from foo3
				group by foo3.ocnumber, foo3.vendorcode, foo3.buyercode, foo3.location_id
			)

			INSERT INTO logistica.order (
  				number,
  				deliverydate,
  				syncdate,
  				needunits,
  				receivedunits,
  				buyer_id,
  				vendor_id,
  				deliverylocation_id,
				ordertype_id
			)

			SELECT wd.ocnumber,
				MIN(logistica.totimestamp_wtz(wd.deliverydate, 'YYYYMMDD')),
				:now,
				SUM(CAST(wd.needqty as double precision)) as units,
				SUM(CAST(wd.receivedqty as double precision)) as receptionunits,
				bu.id as buyer_id,
				ve.id as vendor_id,
				foo4.location_id,
				:orderTypeId
			FROM excelwalmartdata as wd,
				 logistica.vendor as ve,
				 logistica.buyer as bu,
				 foo4
			WHERE ve.code = wd.vendorcode
			AND bu.code = wd.buyercode
			AND foo4.ocnumber = wd.ocnumber
			AND foo4.buyercode = wd.buyercode
			and foo4.vendorcode =   wd.vendorcode
			and foo4.vendorcode = ve.code
			AND foo4.buyercode = bu.code
			AND wd.isneworder = TRUE
			GROUP BY wd.ocnumber, ve.id, bu.id, foo4.location_id
			]]>
		</sql-query>
		
		
		<sql-query name="doAddOrderByNumber">
			<![CDATA[
				WITH foo1 AS (
					SELECT wd.ocnumber, wd.vendorcode, wd.buyercode, wd.locationcode
					FROM excelwalmartdata as wd
					GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode,  wd.locationcode
					),

				foo2 as (
					SELECT ocnumber, vendorcode, buyercode, count(locationcode) as loccount
					FROM foo1
					GROUP BY ocnumber ,vendorcode, buyercode
					),

				foo3 as (
					select foo2.ocnumber, foo2.vendorcode, foo2.buyercode, 
					CASE WHEN foo2.loccount = 1 
					THEN loc.id
						ELSE NULL
					END as location_id
					
					from foo2,
					excelwalmartdata as wd,
					logistica.location as loc
					where wd.ocnumber = foo2.ocnumber
					AND wd.vendorcode = foo2.vendorcode
					AND wd.buyercode = foo2.buyercode
					AND wd.locationcode = loc.code
					group by foo2.ocnumber, foo2.vendorcode, foo2.buyercode, foo2.loccount , loc.id
				),

				foo4 as (
					select foo3.ocnumber, foo3.vendorcode, foo3.buyercode, foo3.location_id
					from foo3
					group by foo3.ocnumber, foo3.vendorcode, foo3.buyercode, foo3.location_id
				)

				INSERT INTO logistica.order (
	  				number,
	  				deliverydate,
	  				syncdate,
	  				needunits,
	  				receivedunits,
	  				buyer_id,
	  				vendor_id,
	  				deliverylocation_id
				)

				SELECT wd.ocnumber,
					MIN(logistica.totimestamp_wtz(wd.deliverydate, 'YYYYMMDD')),
					:now,
					SUM(CAST(wd.needqty as double precision)) as units,
					SUM(CAST(wd.receivedqty as double precision)) as receptionunits,
					bu.id as buyer_id,
					ve.id as vendor_id,
					foo4.location_id
				FROM excelwalmartdata as wd,
					 logistica.vendor as ve,
					 logistica.buyer as bu,
					 foo4
				WHERE ve.code = wd.vendorcode
				AND bu.code = wd.buyercode
				AND foo4.ocnumber = wd.ocnumber
				AND foo4.buyercode = wd.buyercode
				and foo4.vendorcode =   wd.vendorcode
				and foo4.vendorcode = ve.code
				AND foo4.buyercode = bu.code
				AND wd.ocnumber IN (:ordernbrs)
				GROUP BY wd.ocnumber, ve.id, bu.id, foo4.location_id
			]]>
		</sql-query>
		
		
		<sql-query name="doAddOrderDetail">
			<![CDATA[
				INSERT INTO logistica.orderdetail (
					order_id,
				  	item_id,
  					packagecode,
  					packagedescription,
  					needunits,
  					receivedunits,
  					shippinggroup
				)
		
				SELECT 	oc.id as order_id,
						it.id as item_id,
						wd.packagecode,
						wd.packagedescription,
						SUM(CAST(wd.needqty AS DOUBLE PRECISION)),
						SUM(CAST(wd.receivedqty AS DOUBLE PRECISION)),
						row_number() over (PARTITION BY oc.id order by it.id)
				FROM excelwalmartdata as wd,
					 logistica.order as oc,
					 logistica.item as it,
					 logistica.vendor as ve,
					 logistica.buyer as bu
				WHERE  wd.itemcode = it.code
				AND wd.vendorcode = ve.code
				AND wd.buyercode = bu.code
				AND oc.number = wd.ocnumber
				AND wd.isneworder = TRUE
				GROUP BY oc.id,	it.id, wd.packagecode, wd.packagedescription
			]]>
		</sql-query>
		
		<sql-query name="doAddOrderDetailByNumber">
			<![CDATA[
				INSERT INTO logistica.orderdetail (
					order_id,
				  	item_id,
  					packagecode,
  					packagedescription,
  					needunits,
  					receivedunits,
  					shippinggroup
				)
		
				SELECT 	oc.id as order_id,
						it.id as item_id,
						wd.packagecode,
						wd.packagedescription,
						SUM(CAST(wd.needqty AS DOUBLE PRECISION)),
						SUM(CAST(wd.receivedqty AS DOUBLE PRECISION)),
						row_number() over (PARTITION BY oc.id order by it.id)
				FROM excelwalmartdata as wd,
					 logistica.order as oc,
					 logistica.item as it,
					 logistica.vendor as ve,
					 logistica.buyer as bu
				WHERE  wd.itemcode = it.code
				AND wd.vendorcode = ve.code
				AND wd.buyercode = bu.code
				AND oc.number = wd.ocnumber
				AND wd.ocnumber IN(:ordernbrs)
				GROUP BY oc.id,	it.id, wd.packagecode, wd.packagedescription
		
			]]>
		</sql-query>
		
		<sql-query name="doAddPreDeliveryDetail">
			<![CDATA[
				INSERT INTO logistica.predeliverydetail(
					order_id,
  					item_id,
  					location_id,
  					linenumber,
  					units,
  					receivedunits,
  					shippinggroup
				)
				SELECT oc.id as order_id,
				it.id as item_id,
				loc.id as location_id,
				CAST(wd.line AS INTEGER), 
				CAST(wd.needqty AS DOUBLE PRECISION),
				CAST(wd.receivedqty AS DOUBLE PRECISION),
				od.shippinggroup
				FROM excelwalmartdata as wd,
				logistica.order as oc,
				logistica.item as it,
				logistica.location as loc,
				logistica.vendor as ve,
				logistica.buyer as bu,
				logistica.orderdetail as od
				WHERE wd.itemcode = it.code
				AND wd.vendorcode = ve.code
				AND wd.buyercode = bu.code
				AND wd.ocnumber = oc.number
				AND wd.locationcode = loc.code
				AND od.order_id = oc.id and od.item_id = it.id
				AND wd.isneworder = TRUE
				
			]]>
		</sql-query>
		
		<sql-query name="doAddPreDeliveryDetailByNumber">
			<![CDATA[
				INSERT INTO logistica.predeliverydetail(
					order_id,
  					item_id,
  					location_id,
  					linenumber,
  					units,
  					receivedunits,
  					shippinggroup
				)
				SELECT oc.id as order_id,
				it.id as item_id,
				loc.id as location_id,
				CAST(wd.line AS INTEGER), 
				CAST(wd.needqty AS DOUBLE PRECISION),
				CAST(wd.receivedqty AS DOUBLE PRECISION),
				od.shippinggroup
				FROM excelwalmartdata as wd,
				logistica.order as oc,
				logistica.item as it,
				logistica.location as loc,
				logistica.vendor as ve,
				logistica.buyer as bu,
				logistica.orderdetail as od
				WHERE wd.itemcode = it.code
				AND wd.vendorcode = ve.code
				AND wd.buyercode = bu.code
				AND wd.ocnumber = oc.number
				AND od.order_id = oc.id and od.item_id = it.id
				AND wd.locationcode = loc.code
				AND wd.ocnumber IN (:ordernbrs)
				
			]]>
		</sql-query>
		
		<sql-query name="doGetOrdersWithReception">
			<![CDATA[
				SELECT wd.ocnumber as ordernbr, wd.vendorcode, wd.buyercode
				FROM excelwalmartdata as wd
				WHERE ocnumber IN (:ordernbrs)
				GROUP BY wd.ocnumber, wd.vendorcode, wd.buyercode
				having sum(cast(receivedqty as double precision )) > 0
			]]>
		</sql-query>
		
		
		<sql-query name="doAddReception">
			<![CDATA[
				INSERT INTO logistica.reception (
  					buyer_id,
  					number,
  					receptiondate,
  					syncdate
				)
				SELECT bu.id, wd.ocnumber,
				MIN(logistica.totimestamp_wtz(wd.deliverydate, 'YYYYMMDD')),
				:now
				FROM excelwalmartdata as wd,
				logistica.buyer as bu
				WHERE
				wd.buyercode = bu.code 
				AND wd.ocnumber IN (:ordernbrs)
				GROUP BY bu.id, wd.ocnumber
	
			]]>
		</sql-query>
		
		<sql-query name="doAddOrderReception">
			<![CDATA[
				INSERT INTO logistica.orderreception(
					order_id,
  					reception_id,
  					currentsoastatetypedate,
  					currentsoastatetype_id
				)

				SELECT oc.id as order_id,
					rec.id as reception_id,
					:now,
					:soastatetype
				FROM logistica.order as oc,
				logistica.reception as rec,
				logistica.vendor as ve,
				logistica.buyer as bu,
				excelwalmartdata as wd
				WHERE wd.ocnumber = oc.number
				AND wd.ocnumber = rec.number
				AND wd.vendorcode = ve.code
				AND wd.buyercode = bu.code
				AND oc.buyer_id = bu.id
				AND oc.vendor_id = ve.id 
				AND rec.buyer_id = bu.id
				AND wd.ocnumber IN (:ordernbrs)
				GROUP BY oc.id, rec.id 
			
			]]>
		</sql-query>
		
		<!--
		El numnero de recepcionen el archivo viene informado en el campo ocnumber
		(AND wd.ocnumber = rec.number) 
		--> 
		
		<sql-query name="doAddReceptionDetail">
			<![CDATA[
				INSERT INTO logistica.receptiondetail(
					order_id,
  					reception_id,
  					item_id,
  					location_id,
  					units
				)
				
				SELECT oc.id as order_id,
					rec.id as reception_id,
					it.id as item_id,
					loc.id as location_id,
					cast(wd.receivedqty as DOUBLE PRECISION) as received
				FROM	excelwalmartdata as wd,
						logistica.order as oc,
						logistica.reception as rec,
						logistica.item as it,
						logistica.location as loc,
						logistica.vendor as ve,
						logistica.buyer as bu
				WHERE wd.itemcode = it.code
				AND wd.ocnumber = oc.number
				AND wd.locationcode = loc.code
				AND wd.vendorcode = ve.code
				AND wd.buyercode  = bu.code
				AND wd.ocnumber = rec.number 
				AND wd.ocnumber IN (:ordernbrs)
								
			]]>
		</sql-query>
		
		<sql-query name="doGetOrdersWithOutReceptionOnDB">
			<![CDATA[
				SELECT oc.number as ordernbr, bu.code as buyercode, ve.code as vendorcode 
				FROM 
				logistica.order as oc
				left join logistica.orderreception  as orec
				ON orec.order_id = oc.id
				left join logistica.reception as rec
				ON orec.reception_id = rec.id
				LEFT JOIN logistica.vendor as ve
				ON oc.vendor_id= ve.id
				LEFT JOIN logistica.buyer as bu
				ON oc.buyer_id = bu.id
				AND rec.buyer_id = bu.id 
				WHERE rec.number is null
				AND oc.buyer_id = :buyerid
				AND oc.vendor_id = :vendorid
				AND oc.number IN (:ordernbrs)	
				  			
			]]>
		</sql-query>

		<sql-query name="doCalculateReceivedOrder">
			<![CDATA[
				WITH foo as 
				(
					SELECT order_id,
					SUM(units) as units
					FROM logistica.receptiondetail
					WHERE order_id in (:orderids)
					GROUP BY order_id
				)
				UPDATE logistica.order as oc
				SET receivedunits = foo.units
				FROM foo
				WHERE oc.id = foo.order_id
				
			]]>
		</sql-query>


		<sql-query name="getOrdersByNumberBuyercodeVendorcode">
			<![CDATA[
				SELECT	oc.id, oc.number, oc.deliverydate, oc.syncdate,
  				oc.needunits, oc.receivedunits,
  				oc.buyer_id as buyerid, oc.vendor_id as vendorid, oc.deliverylocation_id as deliverylocationid
   				FROM
				logistica.order as oc,
				logistica.buyer as bu,
				logistica.vendor as ve
				WHERE
				oc.vendor_id = ve.id
				AND oc.buyer_id = bu.id
				AND oc.buyer_id = :buyerid 
				AND oc.vendor_id = :vendorid
				AND oc.number in (:ordernbrs)
			]]>
		</sql-query>

		
		<!-- Valida si en la recepcion de una orden ya cargada en la DB se informaron lineas nuevas -->
		<sql-query name="doCheckOrderAndReceptionLines">
			<![CDATA[
				SELECT 
				wd.ocnumber as ordernbr,
				wd.buyercode,
				wd.vendorcode
				FROM excelwalmartdata as wd
				LEFT JOIN logistica.vendor as ve
				ON wd.vendorcode = ve.code
				LEFT JOIN logistica.buyer as bu
				ON wd.buyercode = bu.code
				LEFT JOIN logistica.item as it
				ON wd.itemcode = it.code
				LEFT JOIN logistica.location as loc
				ON wd.locationcode = loc.code
				LEFT JOIN logistica.order as oc
				on wd.ocnumber = oc.number
				LEFT JOIN logistica.predeliverydetail as pd
				ON oc.id = pd.order_id
				AND it.id = pd.item_id
				AND loc.id = pd.location_id
				WHERE				
				wd.ocnumber IN (:ordernbrs)
				AND (item_id IS NULL or location_id is NULL)
				GROUP BY wd.ocnumber, wd.buyercode,	wd.vendorcode
			]]>
		</sql-query>
		
		<!-- Valida si en la recepcion se informaron menos lineas que las de la orden ya cargada en la DB -->
		<sql-query name="doCheckRemovedLinesOnReception">
			<![CDATA[
				SELECT
				oc.number as ordernbr,
				bu.code as buyercode,
				ve.code as vendorcode
				FROM logistica.order as oc
				LEFT JOIN logistica.orderdetail as od
				ON od.order_id = oc.id
				LEFT JOIN logistica.predeliverydetail as pd
				ON oc.id = pd.order_id
				AND od.item_id = pd.item_id
				LEFT JOIN logistica.buyer as bu
				ON oc.buyer_id = bu.id
				LEFT JOIN logistica.item as it
				ON pd.item_id = it.id
				AND od.item_id = it.id
				LEFT JOIN logistica.location as loc
				ON pd.location_id = loc.id
				LEFT JOIN logistica.vendor as ve
				ON oc.vendor_id = ve.id
				LEFT JOIN excelwalmartdata as wd
				ON wd.ocnumber = oc.number
				AND wd.itemcode = it.code
				AND wd.locationcode = loc.code
				AND wd.buyercode = bu.code
				AND wd.vendorcode = ve.code
				where oc.number IN (:ordernbrs)
				AND oc.buyer_id = :buyerid
				AND oc.vendor_id = :vendorid
				AND (wd.itemcode IS NULL)
				GROUP BY oc.number,	bu.code, ve.code
			]]>
		</sql-query>
		
		<!-- Valida si la orden en la que se informó la recepción -->
		<sql-query name="doCheckUpdatedOrderQty">
			<![CDATA[
				SELECT 
				wd.ocnumber as ordernbr,
				wd.buyercode,
				wd.vendorcode
				FROM excelwalmartdata as wd,
				logistica.order as oc,
				logistica.predeliverydetail as pd,
				logistica.item as it,
				logistica.vendor as ve,
				logistica.buyer as bu,
				logistica.location as loc
				WHERE 
				wd.ocnumber = oc.number
				AND pd.order_id = oc.id
				AND pd.item_id = it.id
				AND pd.location_id = loc.id
				AND wd.buyercode = bu.code
				AND wd.vendorcode = ve.code
				AND wd.itemcode = it.code
				AND oc.vendor_id = ve.id
				AND oc.buyer_id = bu.id
				AND wd.locationcode = loc.code
				AND wd.ocnumber IN (:ordernbrs)
				AND (CAST(pd.units as integer) - CAST(wd.needqty as integer)) != 0
				GROUP BY wd.ocnumber, wd.buyercode,	wd.vendorcode
			]]>
		</sql-query>

		<sql-query name="doDeletePreDeliveryDetailByOrderId">
			<![CDATA[
				DELETE FROM logistica.predeliverydetail 
				WHERE order_id IN (:orderids)
			]]>
		</sql-query>

		<sql-query name="doDeleteOrderDetailByOrderId">
			<![CDATA[
				DELETE FROM logistica.orderdetail
				WHERE order_id IN (:orderids)		
			]]>
		</sql-query>

		<sql-query name="doDeleteOrderById">
			<![CDATA[
				DELETE FROM logistica.order
				WHERE id in (:orderids)
			]]>
		</sql-query>

		<sql-query name="doAddSOAStateFromFile">
			<![CDATA[   
				INSERT INTO logistica.soarecstate(
					when1,
					order_id,
  					reception_id,
  					soastatetype_id
				)

				SELECT :now, 
						oc.id as order_id,
						rec.id as reception_id,
						:soastatetype
				FROM logistica.order as oc,
				logistica.reception as rec,
				logistica.vendor as ve,
				logistica.buyer as bu,
				excelwalmartdata as wd
				WHERE wd.ocnumber = oc.number
				AND wd.ocnumber = rec.number
				AND wd.vendorcode = ve.code
				AND wd.buyercode = bu.code
				AND oc.buyer_id = bu.id
				AND oc.vendor_id = ve.id 
				AND rec.buyer_id = bu.id
				AND wd.ocnumber IN (:ordernbrs)
				GROUP BY oc.id, rec.id             
	           
				]]>
		</sql-query>
		<sql-query name="getPendingSOAOrdersByVendor">
			<![CDATA[
				SELECT
					int8(OC.NUMBER) AS ORDERNUMBER, OC.emitteddate as emitted, V.code AS VENDOR, SST.CODE AS CURRENTSOASTATE
				FROM
					LOGISTICA.ORDER AS OC JOIN
					LOGISTICA.VENDOR AS V ON (OC.VENDOR_ID = V.ID) JOIN
					LOGISTICA.SOASTATETYPE AS SST ON SST.ID = OC.soastatetype_id 
				WHERE 
					SST.ID <> :soastatetype AND
					OC.soastatetypedate <= :soapendingtime AND
					V.ID = :vendorid AND
					OC.emitteddate >= :activationdate
			]]>
		</sql-query>
		

	</class>		
</hibernate-mapping>




