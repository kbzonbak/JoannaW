<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
	Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
	<class name="bbr.esb.events.entities.FileEvent" table="FILE_EVENT" schema="public">
		<id name="id" type="java.lang.Long">
			<column name="ID" />
			<generator class="identity" />
		</id>
		<property name="datecreated" type="java.util.Date" column="DATE_CREATED" length="26" not-null="true" />
		<property name="documentid" type="java.lang.String" column="DOCUMENTID" length="50" not-null="true" />
		<property name="filename" type="java.lang.String" column="FILENAME" length="100" not-null="true" />
		<property name="received" type="java.lang.Boolean" column="RECEIVED" not-null="true" />
		<property name="datereceived" type="java.util.Date" column="DATE_RECEIVED" length="26" not-null="false" />
		<property name="ok" type="java.lang.Boolean" column="OK" not-null="false" />
		<property name="informed" type="java.lang.Boolean" column="INFORMED" not-null="true" />
		<many-to-one name="site" column="SITE_ID" not-null="true" insert="true" update="true" />
		<many-to-one name="service" column="SERVICE_ID" not-null="true" insert="true" update="true" />
		<many-to-one name="company" column="COMPANY_ID" not-null="true" insert="true" update="true" />
        <sql-query name="getUninformedFileEvents">
          select distinct
               FE.ID AS ID,
               FE.DATE_CREATED AS DATECREATED,
               FE.DATE_RECEIVED AS DATERECEIVED,
               FE.RECEIVED AS RECEIVED,
               FE.OK AS OK,
               FE.DOCUMENTID AS DOCUMENTID,
               FE.FILENAME AS FILENAME,
               ST.ID AS SITEKEY,
               ST.CODE AS SITECODE,
               ST.NAME AS SITENAME,
               SV.ID AS SERVICEKEY,
               SV.CODE AS SERVICECODE,
               SV.NAME AS SERVICENAME,
               AC.COMPANY_ID AS COMPANYKEY,
               AC.CODE AS ACCESSCODE
          from FILE_EVENT FE
          join ACCESS AC on FE.SITE_ID = AC.SITE_ID and FE.COMPANY_ID = AC.COMPANY_ID
          join SITE ST on ST.ID = AC.SITE_ID
          join SERVICE SV on FE.SERVICE_ID = SV.ID 
          where FE.RECEIVED = true and FE.INFORMED = false order by FE.ID
        </sql-query>

        <sql-query name="getFileEventsByContractedService">
          select distinct
               FE.ID AS ID,
               FE.DATE_CREATED AS DATECREATED,
               FE.DATE_RECEIVED AS DATERECEIVED,
               FE.RECEIVED AS RECEIVED,
               FE.OK AS OK,
               FE.DOCUMENTID AS DOCUMENTID,
               FE.FILENAME AS FILENAME,
               ST.ID AS SITEKEY,
               ST.NAME AS SITENAME,
               SV.ID AS SERVICEKEY,
               SV.NAME AS SERVICENAME,
               AC.COMPANY_ID AS COMPANYKEY,
               AC.CODE AS ACCESSCODE
          from FILE_EVENT FE
          join ACCESS AC on FE.SITE_ID = AC.SITE_ID and FE.COMPANY_ID = AC.COMPANY_ID
          join SITE ST on ST.ID = AC.SITE_ID
          join SERVICE SV on FE.SERVICE_ID = SV.ID 
          where ST.ID = :sitekey and SV.ID = :servicekey and AC.COMPANY_ID = :companykey order by FE.ID desc
        </sql-query>
        
        <sql-query name="countFileEventsByContractedService">
          select count(*)
          from FILE_EVENT FE
          join ACCESS AC on FE.SITE_ID = AC.SITE_ID and FE.COMPANY_ID = AC.COMPANY_ID
          join SITE ST on ST.ID = AC.SITE_ID
          join SERVICE SV on FE.SERVICE_ID = SV.ID 
          where ST.ID = :sitekey and SV.ID = :servicekey and AC.COMPANY_ID = :companykey
        </sql-query>


		<sql-query name="FileEventsOfAServiceEvent">
		SELECT id, date_created as datecreated, informed, site_id as sitekey, service_id as servicekey, company_id as companykey
  		FROM public.file_event
 		WHERE site_id=:siteid AND company_id=:companyid AND service_id=:serviceid AND 
 		( (date_received IS NULL AND 
 		EXTRACT(epoch FROM (now() - :datecreated )) / 60 
 		&lt; 
 		:delay)  
  		or  (date_received IS NOT NULL AND ok=true AND :datecreated &lt; date_created ) )
		</sql-query>

	</class>
</hibernate-mapping>
