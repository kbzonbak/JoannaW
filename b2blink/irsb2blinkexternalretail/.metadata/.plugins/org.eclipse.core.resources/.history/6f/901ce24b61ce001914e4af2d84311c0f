package bbr.b2b.extractors.hites.manager.classes;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.stream.Stream;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonString;
import javax.json.JsonStructure;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.log4j.Logger;


import bbr.b2b.b2blink.logistic.xml.OC_customer.Local;
import bbr.b2b.b2blink.logistic.xml.OC_customer.ObjectFactory;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order.Client;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order.Details;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order.Details.Detail;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order.Details.Detail.Predistributions;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order.Details.Detail.Predistributions.Predistribution;
import bbr.b2b.common.adtclasses.exceptions.OperationFailedException;
import bbr.b2b.common.adtclasses.exceptions.ServiceException;
import bbr.b2b.connector.managers.classes.PendingMessageManager;
import bbr.b2b.connector.managers.interfaces.SchedulerManagerLocal;
import bbr.b2b.extractors.hites.manager.interfaces.EdiOrderManagerLocal;
import bbr.b2b.b2blink.logistic.xml.OC_customer.Order.Section;
import bbr.b2b.logistic.utils.SFTPClient;
import bbr.esb.services.webservices.facade.AccessDeniedException_Exception;
import bbr.esb.services.webservices.facade.InitParamCSDTO;
import bbr.esb.services.webservices.facade.NotFoundException_Exception;
import bbr.esb.services.webservices.facade.OperationFailedException_Exception;
import bbr.esb.services.webservices.facade.ServiceManagerServer;
import bbr.esb.services.webservices.facade.ServiceManagerServerService;

@Stateless(name = "managers/EdiOrderManager")
@TransactionAttribute(TransactionAttributeType.REQUIRED)
public class EdiOrderManager  implements EdiOrderManagerLocal {
	
	private static Logger logger = Logger.getLogger(PendingMessageManager.class);
	private static JAXBContext jc = null;
	static SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd"); 
	
	@EJB
	SchedulerManagerLocal schmanager;
	
	@Resource
	private SessionContext ctx;
	
	public void setCtx(SessionContext ctx) {
		this.ctx = ctx;
	}
	
	
	private static JAXBContext getJC() throws JAXBException {
		if (jc == null)
			jc = JAXBContext.newInstance("bbr.b2b.b2blink.logistic.xml.OC_customer");
		return jc;
	}
	
	public void execute() throws ServiceException {
		
		try {
			String sitename = "CL0501";
			String service = "LOC";
			List<InitParamCSDTO> credentials = getCredentials(sitename, service);
			for (InitParamCSDTO credential : credentials) {
				HashMap<String, String> keys = JsonToHashMap(credential.getCredenciales(), "userSftp", "passwordSftp", "serverSftp", "port", "originPathSftp", "destinationPathSftp");
				SFTPClient sftpClient = new SFTPClient();
				sftpClient.connect(keys.get("userSftp"), keys.get("passwordSftp"), keys.get("serverSftp"),
						keys.get("port"), keys.get("originPathSftp"), keys.get("destinationPathSftp"));
				doTransform(credential.getCompanyname(), sitename, credential.getAccesscode(), keys.get("destinationPathSftp"));
				
			} 
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void doTransform(String companyName, String buyer, String vendor, String folder) throws DatatypeConfigurationException, JAXBException, IOException {
		List<String> xmls = new ArrayList<>();
		try (Stream<Path> filePathStream=Files.walk(Paths.get(folder))) {
		    filePathStream.forEach(filePath -> {
		        if (Files.isRegularFile(filePath)) {
		            System.out.println(filePath);
		            try {
		            	List<String> allLines = Files.readAllLines(filePath, StandardCharsets.ISO_8859_1);
		            	convertToOC(buyer, vendor, filePath.getFileName().toString(), allLines);
					} catch (Exception e) {
						e.printStackTrace();
					}
		        } else {
		        	System.out.println(filePath + " no es una archivo regular");
		        }
		    });
		}
	}
	
	public void convertToOC(String buyer, String vendor, String fileName, List<String> allLines) throws IOException, DatatypeConfigurationException, ParseException, JAXBException, OperationFailedException{
		ObjectFactory objFactory = new ObjectFactory();
		Order orderXML = objFactory.createOrder();
		if( allLines.size()> 0){
			String firstLine = allLines.get(0);
			
			orderXML.setBuyer(buyer);
			orderXML.setVendor(vendor);
			String[] cols = firstLine.split("\\|");
			orderXML.setNumber(cols[0]);
			
			String orderType = fileName.toString().contains("DDC") ? "DDC" : "DVH";
			
			orderXML.setEffectivdate(StringToGregorianCalendar(cols[1]));
			orderXML.setCommitmentdate(StringToGregorianCalendar(orderType.equals("DVH") ? cols[10] : cols[2]));
			orderXML.setIssuedate(StringToGregorianCalendar(cols[11]));
			orderXML.setExpirationdate(StringToGregorianCalendar(orderType.equals("DVH") ? cols[10] : cols[2]));
			orderXML.setOrdertype(orderType);
			orderXML.setOrdertypename(orderType);
			orderXML.setPreviousordertype("");
			orderXML.setComplete(true);
			orderXML.setReceiptnumber(cols[14].trim());
			
			
			//orderXML.setRequest(purchaseOrderDTO.getClient_purchase_order().getOrder_delivery_id());
			//orderXML.setExpirationdate(StringToGregorianCalendar(purchaseOrderDTO.getPurchase_order().getPo_expiration_date()));
			//orderXML.setPaymentcondition(purchaseOrderDTO.getPurchase_order().getPo_payment_method());
			//orderXML.setObservation(purchaseOrderDTO.getPurchase_order().getPo_obs());
			//orderXML.setResponsible("");
			//orderXML.setResponsibleemail("");
			//orderXML.setNumref1(cols[18]);
			
			String deliveryplace[] = cols[4].split(" ");
			orderXML.setDeliveryplace(setLocal(objFactory, deliveryplace[0], cols[4].replace(deliveryplace[0] + " ", "").trim()));
			orderXML.setSaleplace(setLocal(objFactory, cols[12].trim() , cols[13].trim()));
			orderXML.setClient(setCliente(objFactory, cols));
			
			Section section = objFactory.createOrderSection();
			section.setCode(cols[16].trim());
			section.setName(cols[17].trim());
			orderXML.setSection(section);
		}
		
		
		orderXML.setDetails(setDetails(objFactory, allLines));

		
		JAXBContext jc = getJC();
		Marshaller m = jc.createMarshaller();
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		StringWriter sw = new StringWriter();
		m.marshal(orderXML, sw);
		String msg = sw.toString();
		schmanager.doSendMessageQueue(buyer, vendor, orderXML.getNumber(), msg, null);
	}
	
	private Details setDetails(ObjectFactory objFactory, List<String> details) {
		Details orderDetails = objFactory.createOrderDetails();
		List<Detail> listDetail = orderDetails.getDetail();
		int position = 1;
		for (String line: details){
			String cols[] = line.split("\\|");
			Detail detail = objFactory.createOrderDetailsDetail();
			detail.setPosition(position);
			//detail.setSkuvendor(cols[6]);
			detail.setSkubuyer(cols[6]);
			detail.setEan13(cols[5]);
			detail.setProductdescription(cols[7].trim());
			detail.setListcost(Double.valueOf(cols[9].replace(",", ".")));
			//detail.setListprice(Double.valueOf(item.getItem_net_cost()));
			detail.setFinalcost(Double.valueOf(cols[28]));
			detail.setDescriptionumc("UN");
			detail.setDescriptionumb("unidad");
			detail.setQuantityumc(Integer.valueOf(cols[8].trim()));
			detail.setUmbXUmc(1);
			detail.setNumref1(cols[18].trim());
			//detail.setInnerpack(Integer.valueOf(cols[8].trim()));
			/*
			detail.setEan1(item.getVendor_ean13());
			detail.setItem("");
			
			detail.setEan2("");
			detail.setEan3("");
			detail.setStylecode("");
			detail.setStyledescription("");
			detail.setStylebrand("");
			detail.setTolerance("");
			detail.setProductdeliverydate("");
			detail.setFreightcost("");
			detail.setFreightweight("");
			detail.setObservation(item.getItem_obs());
		 	*/
			Predistributions predistributions = objFactory.createOrderDetailsDetailPredistributions();
			List<Predistribution> listPredistributions = predistributions.getPredistribution();
			Predistribution predistribution = new Predistribution();
			predistribution.setQuantity(Integer.valueOf(cols[8].trim()));
			predistribution.setDeliveryplace(setLocal(objFactory, cols[29].trim(), cols[4].replace(cols[29]+ " ", "").trim()));
			listPredistributions.add(predistribution);
			detail.setPredistributions(predistributions);
			listDetail.add(detail);
			position++;
		}
		return orderDetails;
	}

	public Local setLocal(ObjectFactory objFactory, String code, String name){
		Local local = objFactory.createLocal();
		local.setCode(code);
		local.setName(name);
		return local;
	}
	
	private Client setCliente(ObjectFactory objFactory, String[] cols){
		Client client = objFactory.createOrderClient();
		client.setName(cols[22].trim());
		if(!cols[22].isEmpty()){
			String[] rut = cols[21].split(" ");
			client.setIdentity(rut[0]);
			client.setCheckdigit(rut[1]);
		}
		
		client.setPhone(cols[25].trim());
		client.setPhone2(cols[26].trim());
		//TODO: email
		//client.setEmail(clientDTO.getClient_email());
		client.setAddress(cols[23].trim());
		//client.setStreetnumber("");
		//client.setDepartmetnumber("");
		//client.setHousenumber("");
		//client.setRegion(clientDTO.getClient_region());
		client.setCommune(cols[3].trim());
		client.setCity(cols[24].trim());
		//client.setLocation("");
		client.setObservation(cols[27].trim());
		
		return client;
	}
	
	private XMLGregorianCalendar StringToGregorianCalendar(String stringDate) throws DatatypeConfigurationException, ParseException{
		if(stringDate != null && !stringDate.isEmpty()){
			Date date = sdf.parse(stringDate);
			Locale locale = new Locale("es", "CL");
			GregorianCalendar gcal = new GregorianCalendar(locale);
			gcal.setTime(date);
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);
		} 
		return null;
	}

	private List<InitParamCSDTO> getCredentials(String sitename, String service) throws MalformedURLException, AccessDeniedException_Exception, OperationFailedException_Exception, NotFoundException_Exception{
		// WS ACTUALIZAR DESPACHOS
		String endpoint = "http://10.200.3.99:8180/SOA_GENERAL_Web/ServiceManagerServer?wsdl";
		ServiceManagerServer serviceClient = new ServiceManagerServerService(new URL(endpoint)).getServiceManagerServerPort();
		List<InitParamCSDTO> response = serviceClient.getCredentialsBySiteService(sitename, service);
		if (response == null){
			return new ArrayList<InitParamCSDTO>();
		}
		return response;
	}
	
	
	
	private HashMap<String, String> JsonToHashMap(String credential, String... keys){
		try {
			 
			HashMap<String, String> data = new HashMap<>();
		    JsonReader reader = Json.createReader(new StringReader(credential));
		    JsonStructure jsonst = reader.read();
		    JsonObject object = (JsonObject) jsonst;
		    for(String key : keys){
		    	JsonObject status = (JsonObject) object.get(key);
		    	data.put(key, status.toString());
		    }
		     return data;

		  
		} catch (Exception e) {
		    
		    e.printStackTrace();
		}
		return null;
	}
}
