/**
 * MappingMapToOC_Customer.java
 *
 * This file was generated by MapForce 2011r3sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package bbr.b2b.extractors.mappings;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToOC_Customer extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = false;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_ORDERS;
	
		public main(com.altova.mapforce.IMFNode var1_instance_ORDERS)
		{
			this.var1_instance_ORDERS = var1_instance_ORDERS;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			javax.xml.namespace.QName var2_create_qname;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				var2_create_qname = com.altova.functions.Core.createQName("deliveryplace", "http://www.bbr.cl/OC_Customer");
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Envelope", ""), closure.var1_instance_ORDERS));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("order", "http://www.bbr.cl/OC_Customer"), (new seq1_seq_(var3_filter_elements, var2_create_qname)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_seq_ implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
		javax.xml.namespace.QName var72_create_qname;
	
		public seq1_seq_(com.altova.mapforce.IEnumerable var1_filter_elements, javax.xml.namespace.QName var72_create_qname)
		{
			this.var1_filter_elements = var1_filter_elements;
			this.var72_create_qname = var72_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_seq_ closure;
			IEnumerator var2_filter_elements;
			IEnumerator var3_filter_elements;
			IEnumerator var7_filter_elements;
			IEnumerator var4_filter_elements;
			IEnumerator var8_filter_elements;
			IEnumerator var5_filter_elements;
			IEnumerator var13_filter_elements;
			IEnumerator var9_filter_elements;
			IEnumerator var6_filter_elements;
			IEnumerator var14_filter_elements;
			IEnumerator var10_filter_elements;
			IEnumerator var22_filter_elements;
			IEnumerator var15_filter_elements;
			IEnumerator var11_filter_elements;
			IEnumerator var23_filter_elements;
			IEnumerator var16_filter_elements;
			IEnumerator var12_filter_elements;
			IEnumerator var24_filter_elements;
			IEnumerator var17_filter_elements;
			IEnumerator var31_filter_elements;
			IEnumerator var25_filter_elements;
			IEnumerator var18_filter_elements;
			IEnumerator var32_filter_elements;
			IEnumerator var26_filter_elements;
			IEnumerator var39_filter_elements;
			IEnumerator var33_filter_elements;
			IEnumerator var19_filter_elements;
			IEnumerator var27_filter_elements;
			IEnumerator var40_filter_elements;
			IEnumerator var20_filter_elements;
			IEnumerator var34_filter_elements;
			IEnumerator var47_filter_elements;
			IEnumerator var28_filter_elements;
			IEnumerator var41_filter_elements;
			boolean var21_equal;
			IEnumerator var35_filter_elements;
			IEnumerator var48_filter_elements;
			IEnumerator var29_filter_elements;
			IEnumerator var42_filter_elements;
			IEnumerator var55_filter_elements;
			IEnumerator var36_filter_elements;
			IEnumerator var49_filter_elements;
			boolean var30_equal;
			IEnumerator var43_filter_elements;
			IEnumerator var56_filter_elements;
			IEnumerator var37_filter_elements;
			IEnumerator var50_filter_elements;
			IEnumerator var63_filter_elements;
			IEnumerator var44_filter_elements;
			IEnumerator var57_filter_elements;
			IEnumerator var51_filter_elements;
			boolean var38_equal;
			IEnumerator var64_filter_elements;
			IEnumerator var58_filter_elements;
			IEnumerator var45_filter_elements;
			IEnumerator var52_filter_elements;
			IEnumerator var65_filter_elements;
			boolean var46_equal;
			IEnumerator var59_filter_elements;
			IEnumerator var53_filter_elements;
			IEnumerator var66_filter_elements;
			IEnumerator var60_filter_elements;
			boolean var54_equal;
			IEnumerator var67_filter_elements;
			IEnumerator var61_filter_elements;
			IEnumerator var68_filter_elements;
			boolean var62_equal;
			IEnumerator var69_filter_elements;
			IEnumerator var70_filter_elements;
			boolean var71_equal;
			public Enumerator(seq1_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 49:	if (moveNext_49()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 51:	if (moveNext_51()) return true; break;
					case 52:	if (moveNext_52()) return true; break;
					case 53:	if (moveNext_53()) return true; break;
					case 54:	if (moveNext_54()) return true; break;
					case 55:	if (moveNext_55()) return true; break;
					case 56:	if (moveNext_56()) return true; break;
					case 57:	if (moveNext_57()) return true; break;
					case 58:	if (moveNext_58()) return true; break;
					case 59:	if (moveNext_59()) return true; break;
					case 60:	if (moveNext_60()) return true; break;
					case 61:	if (moveNext_61()) return true; break;
					case 62:	if (moveNext_62()) return true; break;
					case 66:	if (moveNext_66()) return true; break;
					case 67:	if (moveNext_67()) return true; break;
					case 68:	if (moveNext_68()) return true; break;
					case 69:	if (moveNext_69()) return true; break;
					case 70:	if (moveNext_70()) return true; break;
					case 71:	if (moveNext_71()) return true; break;
					case 72:	if (moveNext_72()) return true; break;
					case 73:	if (moveNext_73()) return true; break;
					case 74:	if (moveNext_74()) return true; break;
					case 75:	if (moveNext_75()) return true; break;
					case 76:	if (moveNext_76()) return true; break;
					case 77:	if (moveNext_77()) return true; break;
					case 78:	if (moveNext_78()) return true; break;
					case 79:	if (moveNext_79()) return true; break;
					case 80:	if (moveNext_80()) return true; break;
					case 81:	if (moveNext_81()) return true; break;
					case 85:	if (moveNext_85()) return true; break;
					case 86:	if (moveNext_86()) return true; break;
					case 87:	if (moveNext_87()) return true; break;
					case 88:	if (moveNext_88()) return true; break;
					case 89:	if (moveNext_89()) return true; break;
					case 90:	if (moveNext_90()) return true; break;
					case 91:	if (moveNext_91()) return true; break;
					case 92:	if (moveNext_92()) return true; break;
					case 93:	if (moveNext_93()) return true; break;
					case 94:	if (moveNext_94()) return true; break;
					case 95:	if (moveNext_95()) return true; break;
					case 96:	if (moveNext_96()) return true; break;
					case 97:	if (moveNext_97()) return true; break;
					case 98:	if (moveNext_98()) return true; break;
					case 102:	if (moveNext_102()) return true; break;
					case 103:	if (moveNext_103()) return true; break;
					case 104:	if (moveNext_104()) return true; break;
					case 105:	if (moveNext_105()) return true; break;
					case 106:	if (moveNext_106()) return true; break;
					case 107:	if (moveNext_107()) return true; break;
					case 108:	if (moveNext_108()) return true; break;
					case 109:	if (moveNext_109()) return true; break;
					case 110:	if (moveNext_110()) return true; break;
					case 111:	if (moveNext_111()) return true; break;
					case 112:	if (moveNext_112()) return true; break;
					case 113:	if (moveNext_113()) return true; break;
					case 114:	if (moveNext_114()) return true; break;
					case 115:	if (moveNext_115()) return true; break;
					case 119:	if (moveNext_119()) return true; break;
					case 120:	if (moveNext_120()) return true; break;
					case 121:	if (moveNext_121()) return true; break;
					case 122:	if (moveNext_122()) return true; break;
					case 123:	if (moveNext_123()) return true; break;
					case 124:	if (moveNext_124()) return true; break;
					case 125:	if (moveNext_125()) return true; break;
					case 126:	if (moveNext_126()) return true; break;
					case 127:	if (moveNext_127()) return true; break;
					case 128:	if (moveNext_128()) return true; break;
					case 129:	if (moveNext_129()) return true; break;
					case 130:	if (moveNext_130()) return true; break;
					case 131:	if (moveNext_131()) return true; break;
					case 132:	if (moveNext_132()) return true; break;
					case 136:	if (moveNext_136()) return true; break;
					case 137:	if (moveNext_137()) return true; break;
					case 138:	if (moveNext_138()) return true; break;
					case 139:	if (moveNext_139()) return true; break;
					case 140:	if (moveNext_140()) return true; break;
					case 141:	if (moveNext_141()) return true; break;
					case 142:	if (moveNext_142()) return true; break;
					case 143:	if (moveNext_143()) return true; break;
					case 144:	if (moveNext_144()) return true; break;
					case 145:	if (moveNext_145()) return true; break;
					case 146:	if (moveNext_146()) return true; break;
					case 147:	if (moveNext_147()) return true; break;
					case 148:	if (moveNext_148()) return true; break;
					case 149:	if (moveNext_149()) return true; break;
					case 150:	if (moveNext_150()) return true; break;
					case 151:	if (moveNext_151()) return true; break;
					case 155:	if (moveNext_155()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:schemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("http://www.bbr.cl/OC_Customer D:/workspace/CustomerService/IRSB2BLinkExternalRetail/maven.1567691497090/irsb2blinkexternalretailmappings/xsd/OC_Customer.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("buyer", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box("CL0701"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var2_filter_elements.moveNext()) {state = 5; return false; }
				var3_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 15;				
				var2_filter_elements.close(); var2_filter_elements = null;
				var7_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var3_filter_elements.moveNext()) {state = 7; return false; }
				var4_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("UNB", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var3_filter_elements.close(); var3_filter_elements = null;
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!var4_filter_elements.moveNext()) {state = 9; return false; }
				var5_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("S003", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				var4_filter_elements.close(); var4_filter_elements = null;
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 12;				
				if (!var5_filter_elements.moveNext()) {state = 11; return false; }
				var6_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F0010", ""), ((com.altova.mapforce.IMFNode)(var5_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 8;				
				var5_filter_elements.close(); var5_filter_elements = null;
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 12;				
				if (!var6_filter_elements.moveNext()) {state = 13; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("vendor", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var6_filter_elements.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 10;				
				var6_filter_elements.close(); var6_filter_elements = null;
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				if (!var7_filter_elements.moveNext()) {state = 16; return false; }
				var8_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var7_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 28;				
				var7_filter_elements.close(); var7_filter_elements = null;
				var13_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 19;				
				if (!var8_filter_elements.moveNext()) {state = 18; return false; }
				var9_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var8_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 15;				
				var8_filter_elements.close(); var8_filter_elements = null;
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 21;				
				if (!var9_filter_elements.moveNext()) {state = 20; return false; }
				var10_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var9_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 17;				
				var9_filter_elements.close(); var9_filter_elements = null;
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 23;				
				if (!var10_filter_elements.moveNext()) {state = 22; return false; }
				var11_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("BGM", ""), ((com.altova.mapforce.IMFNode)(var10_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 19;				
				var10_filter_elements.close(); var10_filter_elements = null;
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 25;				
				if (!var11_filter_elements.moveNext()) {state = 24; return false; }
				var12_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1004", ""), ((com.altova.mapforce.IMFNode)(var11_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 21;				
				var11_filter_elements.close(); var11_filter_elements = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 25;				
				if (!var12_filter_elements.moveNext()) {state = 26; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("number", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var12_filter_elements.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_26() throws Exception {
				state = 23;				
				var12_filter_elements.close(); var12_filter_elements = null;
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 30;				
				if (!var13_filter_elements.moveNext()) {state = 29; return false; }
				var14_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var13_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 47;				
				var13_filter_elements.close(); var13_filter_elements = null;
				var22_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 32;				
				if (!var14_filter_elements.moveNext()) {state = 31; return false; }
				var15_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var14_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 28;				
				var14_filter_elements.close(); var14_filter_elements = null;
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 34;				
				if (!var15_filter_elements.moveNext()) {state = 33; return false; }
				var16_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var15_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_33() throws Exception {
				state = 30;				
				var15_filter_elements.close(); var15_filter_elements = null;
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 36;				
				if (!var16_filter_elements.moveNext()) {state = 35; return false; }
				var17_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG1", ""), ((com.altova.mapforce.IMFNode)(var16_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 32;				
				var16_filter_elements.close(); var16_filter_elements = null;
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 38;				
				if (!var17_filter_elements.moveNext()) {state = 37; return false; }
				var18_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("RFF", ""), ((com.altova.mapforce.IMFNode)(var17_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_37() throws Exception {
				state = 34;				
				var17_filter_elements.close(); var17_filter_elements = null;
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 40;				
				if (!var18_filter_elements.moveNext()) {state = 39; return false; }
				var19_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C506", ""), ((com.altova.mapforce.IMFNode)(var18_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_39() throws Exception {
				state = 36;				
				var18_filter_elements.close(); var18_filter_elements = null;
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 42;				
				if (!var19_filter_elements.moveNext()) {state = 41; return false; }
				var20_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1153", ""), ((com.altova.mapforce.IMFNode)(var19_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 38;				
				var19_filter_elements.close(); var19_filter_elements = null;
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 42;				
				if (!var20_filter_elements.moveNext()) {state = 43; return false; }
				var21_equal = com.altova.functions.Core.equal("ZZZ", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var20_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq2_if_equal(var21_equal, ((com.altova.mapforce.IMFNode)(var19_filter_elements.current()))))))) {state = 42; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ordertype", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq3_cond_cond_last(var21_equal, ((com.altova.mapforce.IMFNode)(var19_filter_elements.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_43() throws Exception {
				state = 40;				
				var20_filter_elements.close(); var20_filter_elements = null;
				return false;
			}
			private boolean moveNext_47() throws Exception {
				state = 49;				
				if (!var22_filter_elements.moveNext()) {state = 48; return false; }
				var23_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var22_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_48() throws Exception {
				state = 66;				
				var22_filter_elements.close(); var22_filter_elements = null;
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("previousordertype", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(""));
				pos++;
				return true;
			}
			private boolean moveNext_49() throws Exception {
				state = 51;				
				if (!var23_filter_elements.moveNext()) {state = 50; return false; }
				var24_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var23_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_50() throws Exception {
				state = 47;				
				var23_filter_elements.close(); var23_filter_elements = null;
				return false;
			}
			private boolean moveNext_51() throws Exception {
				state = 53;				
				if (!var24_filter_elements.moveNext()) {state = 52; return false; }
				var25_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var24_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_52() throws Exception {
				state = 49;				
				var24_filter_elements.close(); var24_filter_elements = null;
				return false;
			}
			private boolean moveNext_53() throws Exception {
				state = 55;				
				if (!var25_filter_elements.moveNext()) {state = 54; return false; }
				var26_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG1", ""), ((com.altova.mapforce.IMFNode)(var25_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_54() throws Exception {
				state = 51;				
				var25_filter_elements.close(); var25_filter_elements = null;
				return false;
			}
			private boolean moveNext_55() throws Exception {
				state = 57;				
				if (!var26_filter_elements.moveNext()) {state = 56; return false; }
				var27_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("RFF", ""), ((com.altova.mapforce.IMFNode)(var26_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_56() throws Exception {
				state = 53;				
				var26_filter_elements.close(); var26_filter_elements = null;
				return false;
			}
			private boolean moveNext_57() throws Exception {
				state = 59;				
				if (!var27_filter_elements.moveNext()) {state = 58; return false; }
				var28_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C506", ""), ((com.altova.mapforce.IMFNode)(var27_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_58() throws Exception {
				state = 55;				
				var27_filter_elements.close(); var27_filter_elements = null;
				return false;
			}
			private boolean moveNext_59() throws Exception {
				state = 61;				
				if (!var28_filter_elements.moveNext()) {state = 60; return false; }
				var29_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1153", ""), ((com.altova.mapforce.IMFNode)(var28_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_60() throws Exception {
				state = 57;				
				var28_filter_elements.close(); var28_filter_elements = null;
				return false;
			}
			private boolean moveNext_61() throws Exception {
				state = 61;				
				if (!var29_filter_elements.moveNext()) {state = 62; return false; }
				var30_equal = com.altova.functions.Core.equal("ZZZ", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var29_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq5_if_equal(var30_equal, ((com.altova.mapforce.IMFNode)(var28_filter_elements.current()))))))) {state = 61; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ordertypename", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first(bbr.b2b.extractors.mappings.vmf.vmf1_inputtoresult.create((java.lang.String)com.altova.functions.Core.first((new seq6_cond_cond_last(var30_equal, ((com.altova.mapforce.IMFNode)(var28_filter_elements.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_62() throws Exception {
				state = 59;				
				var29_filter_elements.close(); var29_filter_elements = null;
				return false;
			}
			private boolean moveNext_66() throws Exception {
				state = 67;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("complete", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.booleanToString(com.altova.CoreTypes.parseBoolean("true"))));
				pos++;
				return true;
			}
			private boolean moveNext_67() throws Exception {
				state = 68;				
				var31_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_68() throws Exception {
				state = 70;				
				if (!var31_filter_elements.moveNext()) {state = 69; return false; }
				var32_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var31_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_69() throws Exception {
				state = 85;				
				var31_filter_elements.close(); var31_filter_elements = null;
				var39_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_70() throws Exception {
				state = 72;				
				if (!var32_filter_elements.moveNext()) {state = 71; return false; }
				var33_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var32_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_71() throws Exception {
				state = 68;				
				var32_filter_elements.close(); var32_filter_elements = null;
				return false;
			}
			private boolean moveNext_72() throws Exception {
				state = 74;				
				if (!var33_filter_elements.moveNext()) {state = 73; return false; }
				var34_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var33_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_73() throws Exception {
				state = 70;				
				var33_filter_elements.close(); var33_filter_elements = null;
				return false;
			}
			private boolean moveNext_74() throws Exception {
				state = 76;				
				if (!var34_filter_elements.moveNext()) {state = 75; return false; }
				var35_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("DTM", ""), ((com.altova.mapforce.IMFNode)(var34_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_75() throws Exception {
				state = 72;				
				var34_filter_elements.close(); var34_filter_elements = null;
				return false;
			}
			private boolean moveNext_76() throws Exception {
				state = 78;				
				if (!var35_filter_elements.moveNext()) {state = 77; return false; }
				var36_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C507", ""), ((com.altova.mapforce.IMFNode)(var35_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_77() throws Exception {
				state = 74;				
				var35_filter_elements.close(); var35_filter_elements = null;
				return false;
			}
			private boolean moveNext_78() throws Exception {
				state = 80;				
				if (!var36_filter_elements.moveNext()) {state = 79; return false; }
				var37_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2005", ""), ((com.altova.mapforce.IMFNode)(var36_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_79() throws Exception {
				state = 76;				
				var36_filter_elements.close(); var36_filter_elements = null;
				return false;
			}
			private boolean moveNext_80() throws Exception {
				state = 80;				
				if (!var37_filter_elements.moveNext()) {state = 81; return false; }
				var38_equal = com.altova.functions.Core.equal("137", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var37_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq8_if_equal(var38_equal, ((com.altova.mapforce.IMFNode)(var36_filter_elements.current()))))))) {state = 80; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("issuedate", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Core.ParseDateTime((java.lang.String)com.altova.functions.Core.first((new seq9_cond_cond_last(var38_equal, ((com.altova.mapforce.IMFNode)(var36_filter_elements.current()))))), "[Y,4-4][M,2-2][D,2-2]"))));
				pos++;
				return true;
			}
			private boolean moveNext_81() throws Exception {
				state = 78;				
				var37_filter_elements.close(); var37_filter_elements = null;
				return false;
			}
			private boolean moveNext_85() throws Exception {
				state = 87;				
				if (!var39_filter_elements.moveNext()) {state = 86; return false; }
				var40_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var39_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_86() throws Exception {
				state = 102;				
				var39_filter_elements.close(); var39_filter_elements = null;
				var47_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_87() throws Exception {
				state = 89;				
				if (!var40_filter_elements.moveNext()) {state = 88; return false; }
				var41_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var40_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_88() throws Exception {
				state = 85;				
				var40_filter_elements.close(); var40_filter_elements = null;
				return false;
			}
			private boolean moveNext_89() throws Exception {
				state = 91;				
				if (!var41_filter_elements.moveNext()) {state = 90; return false; }
				var42_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var41_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_90() throws Exception {
				state = 87;				
				var41_filter_elements.close(); var41_filter_elements = null;
				return false;
			}
			private boolean moveNext_91() throws Exception {
				state = 93;				
				if (!var42_filter_elements.moveNext()) {state = 92; return false; }
				var43_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("DTM", ""), ((com.altova.mapforce.IMFNode)(var42_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_92() throws Exception {
				state = 89;				
				var42_filter_elements.close(); var42_filter_elements = null;
				return false;
			}
			private boolean moveNext_93() throws Exception {
				state = 95;				
				if (!var43_filter_elements.moveNext()) {state = 94; return false; }
				var44_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C507", ""), ((com.altova.mapforce.IMFNode)(var43_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_94() throws Exception {
				state = 91;				
				var43_filter_elements.close(); var43_filter_elements = null;
				return false;
			}
			private boolean moveNext_95() throws Exception {
				state = 97;				
				if (!var44_filter_elements.moveNext()) {state = 96; return false; }
				var45_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2005", ""), ((com.altova.mapforce.IMFNode)(var44_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_96() throws Exception {
				state = 93;				
				var44_filter_elements.close(); var44_filter_elements = null;
				return false;
			}
			private boolean moveNext_97() throws Exception {
				state = 97;				
				if (!var45_filter_elements.moveNext()) {state = 98; return false; }
				var46_equal = com.altova.functions.Core.equal("137", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var45_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq11_if_equal(var46_equal, ((com.altova.mapforce.IMFNode)(var44_filter_elements.current()))))))) {state = 97; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("effectivdate", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Core.ParseDateTime((java.lang.String)com.altova.functions.Core.first((new seq12_cond_cond_last(var46_equal, ((com.altova.mapforce.IMFNode)(var44_filter_elements.current()))))), "[Y,4-4][M,2-2][D,2-2]"))));
				pos++;
				return true;
			}
			private boolean moveNext_98() throws Exception {
				state = 95;				
				var45_filter_elements.close(); var45_filter_elements = null;
				return false;
			}
			private boolean moveNext_102() throws Exception {
				state = 104;				
				if (!var47_filter_elements.moveNext()) {state = 103; return false; }
				var48_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var47_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_103() throws Exception {
				state = 119;				
				var47_filter_elements.close(); var47_filter_elements = null;
				var55_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_104() throws Exception {
				state = 106;				
				if (!var48_filter_elements.moveNext()) {state = 105; return false; }
				var49_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var48_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_105() throws Exception {
				state = 102;				
				var48_filter_elements.close(); var48_filter_elements = null;
				return false;
			}
			private boolean moveNext_106() throws Exception {
				state = 108;				
				if (!var49_filter_elements.moveNext()) {state = 107; return false; }
				var50_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var49_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_107() throws Exception {
				state = 104;				
				var49_filter_elements.close(); var49_filter_elements = null;
				return false;
			}
			private boolean moveNext_108() throws Exception {
				state = 110;				
				if (!var50_filter_elements.moveNext()) {state = 109; return false; }
				var51_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("DTM", ""), ((com.altova.mapforce.IMFNode)(var50_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_109() throws Exception {
				state = 106;				
				var50_filter_elements.close(); var50_filter_elements = null;
				return false;
			}
			private boolean moveNext_110() throws Exception {
				state = 112;				
				if (!var51_filter_elements.moveNext()) {state = 111; return false; }
				var52_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C507", ""), ((com.altova.mapforce.IMFNode)(var51_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_111() throws Exception {
				state = 108;				
				var51_filter_elements.close(); var51_filter_elements = null;
				return false;
			}
			private boolean moveNext_112() throws Exception {
				state = 114;				
				if (!var52_filter_elements.moveNext()) {state = 113; return false; }
				var53_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2005", ""), ((com.altova.mapforce.IMFNode)(var52_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_113() throws Exception {
				state = 110;				
				var52_filter_elements.close(); var52_filter_elements = null;
				return false;
			}
			private boolean moveNext_114() throws Exception {
				state = 114;				
				if (!var53_filter_elements.moveNext()) {state = 115; return false; }
				var54_equal = com.altova.functions.Core.equal("43E", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var53_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq14_if_equal(var54_equal, ((com.altova.mapforce.IMFNode)(var52_filter_elements.current()))))))) {state = 114; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("expirationdate", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Core.ParseDateTime((java.lang.String)com.altova.functions.Core.first((new seq15_cond_cond_last(var54_equal, ((com.altova.mapforce.IMFNode)(var52_filter_elements.current()))))), "[Y,4-4][M,2-2][D,2-2]"))));
				pos++;
				return true;
			}
			private boolean moveNext_115() throws Exception {
				state = 112;				
				var53_filter_elements.close(); var53_filter_elements = null;
				return false;
			}
			private boolean moveNext_119() throws Exception {
				state = 121;				
				if (!var55_filter_elements.moveNext()) {state = 120; return false; }
				var56_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var55_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_120() throws Exception {
				state = 136;				
				var55_filter_elements.close(); var55_filter_elements = null;
				var63_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_121() throws Exception {
				state = 123;				
				if (!var56_filter_elements.moveNext()) {state = 122; return false; }
				var57_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var56_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_122() throws Exception {
				state = 119;				
				var56_filter_elements.close(); var56_filter_elements = null;
				return false;
			}
			private boolean moveNext_123() throws Exception {
				state = 125;				
				if (!var57_filter_elements.moveNext()) {state = 124; return false; }
				var58_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var57_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_124() throws Exception {
				state = 121;				
				var57_filter_elements.close(); var57_filter_elements = null;
				return false;
			}
			private boolean moveNext_125() throws Exception {
				state = 127;				
				if (!var58_filter_elements.moveNext()) {state = 126; return false; }
				var59_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("DTM", ""), ((com.altova.mapforce.IMFNode)(var58_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_126() throws Exception {
				state = 123;				
				var58_filter_elements.close(); var58_filter_elements = null;
				return false;
			}
			private boolean moveNext_127() throws Exception {
				state = 129;				
				if (!var59_filter_elements.moveNext()) {state = 128; return false; }
				var60_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C507", ""), ((com.altova.mapforce.IMFNode)(var59_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_128() throws Exception {
				state = 125;				
				var59_filter_elements.close(); var59_filter_elements = null;
				return false;
			}
			private boolean moveNext_129() throws Exception {
				state = 131;				
				if (!var60_filter_elements.moveNext()) {state = 130; return false; }
				var61_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2005", ""), ((com.altova.mapforce.IMFNode)(var60_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_130() throws Exception {
				state = 127;				
				var60_filter_elements.close(); var60_filter_elements = null;
				return false;
			}
			private boolean moveNext_131() throws Exception {
				state = 131;				
				if (!var61_filter_elements.moveNext()) {state = 132; return false; }
				var62_equal = com.altova.functions.Core.equal("10", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var61_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq17_if_equal(var62_equal, ((com.altova.mapforce.IMFNode)(var60_filter_elements.current()))))))) {state = 131; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("commitmentdate", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Core.ParseDateTime((java.lang.String)com.altova.functions.Core.first((new seq18_cond_cond_last(var62_equal, ((com.altova.mapforce.IMFNode)(var60_filter_elements.current()))))), "[Y,4-4][M,2-2][D,2-2]"))));
				pos++;
				return true;
			}
			private boolean moveNext_132() throws Exception {
				state = 129;				
				var61_filter_elements.close(); var61_filter_elements = null;
				return false;
			}
			private boolean moveNext_136() throws Exception {
				state = 138;				
				if (!var63_filter_elements.moveNext()) {state = 137; return false; }
				var64_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var63_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_137() throws Exception {
				state = 155;				
				var63_filter_elements.close(); var63_filter_elements = null;
				current = com.altova.functions.Core.createElement(closure.var72_create_qname, (new seq23_seq_(closure.var1_filter_elements)));
				pos++;
				return true;
			}
			private boolean moveNext_138() throws Exception {
				state = 140;				
				if (!var64_filter_elements.moveNext()) {state = 139; return false; }
				var65_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var64_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_139() throws Exception {
				state = 136;				
				var64_filter_elements.close(); var64_filter_elements = null;
				return false;
			}
			private boolean moveNext_140() throws Exception {
				state = 142;				
				if (!var65_filter_elements.moveNext()) {state = 141; return false; }
				var66_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var65_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_141() throws Exception {
				state = 138;				
				var65_filter_elements.close(); var65_filter_elements = null;
				return false;
			}
			private boolean moveNext_142() throws Exception {
				state = 144;				
				if (!var66_filter_elements.moveNext()) {state = 143; return false; }
				var67_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG1", ""), ((com.altova.mapforce.IMFNode)(var66_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_143() throws Exception {
				state = 140;				
				var66_filter_elements.close(); var66_filter_elements = null;
				return false;
			}
			private boolean moveNext_144() throws Exception {
				state = 146;				
				if (!var67_filter_elements.moveNext()) {state = 145; return false; }
				var68_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("RFF", ""), ((com.altova.mapforce.IMFNode)(var67_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_145() throws Exception {
				state = 142;				
				var67_filter_elements.close(); var67_filter_elements = null;
				return false;
			}
			private boolean moveNext_146() throws Exception {
				state = 148;				
				if (!var68_filter_elements.moveNext()) {state = 147; return false; }
				var69_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C506", ""), ((com.altova.mapforce.IMFNode)(var68_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_147() throws Exception {
				state = 144;				
				var68_filter_elements.close(); var68_filter_elements = null;
				return false;
			}
			private boolean moveNext_148() throws Exception {
				state = 150;				
				if (!var69_filter_elements.moveNext()) {state = 149; return false; }
				var70_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1153", ""), ((com.altova.mapforce.IMFNode)(var69_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_149() throws Exception {
				state = 146;				
				var69_filter_elements.close(); var69_filter_elements = null;
				return false;
			}
			private boolean moveNext_150() throws Exception {
				state = 150;				
				if (!var70_filter_elements.moveNext()) {state = 151; return false; }
				var71_equal = com.altova.functions.Core.equal("PD", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var70_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq20_if_equal(var71_equal, ((com.altova.mapforce.IMFNode)(var69_filter_elements.current()))))))) {state = 150; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("observation", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq21_cond_cond_last(var71_equal, ((com.altova.mapforce.IMFNode)(var69_filter_elements.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_151() throws Exception {
				state = 148;				
				var70_filter_elements.close(); var70_filter_elements = null;
				return false;
			}
			private boolean moveNext_155() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("details", "http://www.bbr.cl/OC_Customer"), (new seq30_map_filter_elements(closure.var1_filter_elements, closure.var72_create_qname)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var6_filter_elements.close(); var6_filter_elements = null;
				var5_filter_elements.close(); var5_filter_elements = null;
				var4_filter_elements.close(); var4_filter_elements = null;
				var3_filter_elements.close(); var3_filter_elements = null;
				var2_filter_elements.close(); var2_filter_elements = null;
				var12_filter_elements.close(); var12_filter_elements = null;
				var11_filter_elements.close(); var11_filter_elements = null;
				var10_filter_elements.close(); var10_filter_elements = null;
				var9_filter_elements.close(); var9_filter_elements = null;
				var8_filter_elements.close(); var8_filter_elements = null;
				var7_filter_elements.close(); var7_filter_elements = null;
				var20_filter_elements.close(); var20_filter_elements = null;
				var19_filter_elements.close(); var19_filter_elements = null;
				var18_filter_elements.close(); var18_filter_elements = null;
				var17_filter_elements.close(); var17_filter_elements = null;
				var16_filter_elements.close(); var16_filter_elements = null;
				var15_filter_elements.close(); var15_filter_elements = null;
				var14_filter_elements.close(); var14_filter_elements = null;
				var13_filter_elements.close(); var13_filter_elements = null;
				var29_filter_elements.close(); var29_filter_elements = null;
				var28_filter_elements.close(); var28_filter_elements = null;
				var27_filter_elements.close(); var27_filter_elements = null;
				var26_filter_elements.close(); var26_filter_elements = null;
				var25_filter_elements.close(); var25_filter_elements = null;
				var24_filter_elements.close(); var24_filter_elements = null;
				var23_filter_elements.close(); var23_filter_elements = null;
				var22_filter_elements.close(); var22_filter_elements = null;
				var37_filter_elements.close(); var37_filter_elements = null;
				var36_filter_elements.close(); var36_filter_elements = null;
				var35_filter_elements.close(); var35_filter_elements = null;
				var34_filter_elements.close(); var34_filter_elements = null;
				var33_filter_elements.close(); var33_filter_elements = null;
				var32_filter_elements.close(); var32_filter_elements = null;
				var31_filter_elements.close(); var31_filter_elements = null;
				var45_filter_elements.close(); var45_filter_elements = null;
				var44_filter_elements.close(); var44_filter_elements = null;
				var43_filter_elements.close(); var43_filter_elements = null;
				var42_filter_elements.close(); var42_filter_elements = null;
				var41_filter_elements.close(); var41_filter_elements = null;
				var40_filter_elements.close(); var40_filter_elements = null;
				var39_filter_elements.close(); var39_filter_elements = null;
				var53_filter_elements.close(); var53_filter_elements = null;
				var52_filter_elements.close(); var52_filter_elements = null;
				var51_filter_elements.close(); var51_filter_elements = null;
				var50_filter_elements.close(); var50_filter_elements = null;
				var49_filter_elements.close(); var49_filter_elements = null;
				var48_filter_elements.close(); var48_filter_elements = null;
				var47_filter_elements.close(); var47_filter_elements = null;
				var61_filter_elements.close(); var61_filter_elements = null;
				var60_filter_elements.close(); var60_filter_elements = null;
				var59_filter_elements.close(); var59_filter_elements = null;
				var58_filter_elements.close(); var58_filter_elements = null;
				var57_filter_elements.close(); var57_filter_elements = null;
				var56_filter_elements.close(); var56_filter_elements = null;
				var55_filter_elements.close(); var55_filter_elements = null;
				var70_filter_elements.close(); var70_filter_elements = null;
				var69_filter_elements.close(); var69_filter_elements = null;
				var68_filter_elements.close(); var68_filter_elements = null;
				var67_filter_elements.close(); var67_filter_elements = null;
				var66_filter_elements.close(); var66_filter_elements = null;
				var65_filter_elements.close(); var65_filter_elements = null;
				var64_filter_elements.close(); var64_filter_elements = null;
				var63_filter_elements.close(); var63_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq2_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_if_equal closure;
			public Enumerator(seq2_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq3_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq3_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq4_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq4_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq4_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq5_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_if_equal closure;
			public Enumerator(seq5_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq6_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq6_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq7_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq7_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq7_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq8_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_if_equal closure;
			public Enumerator(seq8_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq9_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq9_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq10_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq10_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq10_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq11_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_if_equal closure;
			public Enumerator(seq11_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq12_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq12_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq13_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq13_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq13_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq14_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_if_equal closure;
			public Enumerator(seq14_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq15_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq15_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq16_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq16_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq16_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq17_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_if_equal closure;
			public Enumerator(seq17_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq18_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq18_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F2380", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq19_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq19_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq19_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq20_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_if_equal closure;
			public Enumerator(seq20_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq21_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq21_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq22_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq22_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq22_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_seq_ implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq23_seq_(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_seq_ closure;
			IEnumerator var2_filter_elements;
			IEnumerator var3_filter_elements;
			IEnumerator var11_filter_elements;
			IEnumerator var4_filter_elements;
			IEnumerator var12_filter_elements;
			IEnumerator var5_filter_elements;
			IEnumerator var13_filter_elements;
			IEnumerator var6_filter_elements;
			IEnumerator var14_filter_elements;
			IEnumerator var7_filter_elements;
			IEnumerator var15_filter_elements;
			IEnumerator var8_filter_elements;
			IEnumerator var16_filter_elements;
			IEnumerator var9_filter_elements;
			IEnumerator var17_filter_elements;
			boolean var10_equal;
			IEnumerator var18_filter_elements;
			boolean var19_equal;
			public Enumerator(seq23_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				var3_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 21;				
				var2_filter_elements.close(); var2_filter_elements = null;
				var11_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_filter_elements.moveNext()) {state = 5; return false; }
				var4_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter_elements.close(); var3_filter_elements = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var4_filter_elements.moveNext()) {state = 7; return false; }
				var5_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var4_filter_elements.close(); var4_filter_elements = null;
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!var5_filter_elements.moveNext()) {state = 9; return false; }
				var6_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG1", ""), ((com.altova.mapforce.IMFNode)(var5_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				var5_filter_elements.close(); var5_filter_elements = null;
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 12;				
				if (!var6_filter_elements.moveNext()) {state = 11; return false; }
				var7_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("RFF", ""), ((com.altova.mapforce.IMFNode)(var6_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 8;				
				var6_filter_elements.close(); var6_filter_elements = null;
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 14;				
				if (!var7_filter_elements.moveNext()) {state = 13; return false; }
				var8_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C506", ""), ((com.altova.mapforce.IMFNode)(var7_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 10;				
				var7_filter_elements.close(); var7_filter_elements = null;
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 16;				
				if (!var8_filter_elements.moveNext()) {state = 15; return false; }
				var9_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1153", ""), ((com.altova.mapforce.IMFNode)(var8_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 12;				
				var8_filter_elements.close(); var8_filter_elements = null;
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 16;				
				if (!var9_filter_elements.moveNext()) {state = 17; return false; }
				var10_equal = com.altova.functions.Core.equal("SD", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var9_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq24_if_equal(var10_equal, ((com.altova.mapforce.IMFNode)(var8_filter_elements.current()))))))) {state = 16; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("code", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq25_cond_cond_last(var10_equal, ((com.altova.mapforce.IMFNode)(var8_filter_elements.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_17() throws Exception {
				state = 14;				
				var9_filter_elements.close(); var9_filter_elements = null;
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 23;				
				if (!var11_filter_elements.moveNext()) {state = 22; return false; }
				var12_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var11_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 0;				
				var11_filter_elements.close(); var11_filter_elements = null;
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 25;				
				if (!var12_filter_elements.moveNext()) {state = 24; return false; }
				var13_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var12_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 21;				
				var12_filter_elements.close(); var12_filter_elements = null;
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 27;				
				if (!var13_filter_elements.moveNext()) {state = 26; return false; }
				var14_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var13_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 23;				
				var13_filter_elements.close(); var13_filter_elements = null;
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 29;				
				if (!var14_filter_elements.moveNext()) {state = 28; return false; }
				var15_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG1", ""), ((com.altova.mapforce.IMFNode)(var14_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 25;				
				var14_filter_elements.close(); var14_filter_elements = null;
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 31;				
				if (!var15_filter_elements.moveNext()) {state = 30; return false; }
				var16_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("RFF", ""), ((com.altova.mapforce.IMFNode)(var15_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 27;				
				var15_filter_elements.close(); var15_filter_elements = null;
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 33;				
				if (!var16_filter_elements.moveNext()) {state = 32; return false; }
				var17_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C506", ""), ((com.altova.mapforce.IMFNode)(var16_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 29;				
				var16_filter_elements.close(); var16_filter_elements = null;
				return false;
			}
			private boolean moveNext_33() throws Exception {
				state = 35;				
				if (!var17_filter_elements.moveNext()) {state = 34; return false; }
				var18_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1153", ""), ((com.altova.mapforce.IMFNode)(var17_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 31;				
				var17_filter_elements.close(); var17_filter_elements = null;
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 35;				
				if (!var18_filter_elements.moveNext()) {state = 36; return false; }
				var19_equal = com.altova.functions.Core.equal("SD", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var18_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq27_if_equal(var19_equal, ((com.altova.mapforce.IMFNode)(var17_filter_elements.current()))))))) {state = 35; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("name", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq28_cond_cond_last(var19_equal, ((com.altova.mapforce.IMFNode)(var17_filter_elements.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 33;				
				var18_filter_elements.close(); var18_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var9_filter_elements.close(); var9_filter_elements = null;
				var8_filter_elements.close(); var8_filter_elements = null;
				var7_filter_elements.close(); var7_filter_elements = null;
				var6_filter_elements.close(); var6_filter_elements = null;
				var5_filter_elements.close(); var5_filter_elements = null;
				var4_filter_elements.close(); var4_filter_elements = null;
				var3_filter_elements.close(); var3_filter_elements = null;
				var2_filter_elements.close(); var2_filter_elements = null;
				var18_filter_elements.close(); var18_filter_elements = null;
				var17_filter_elements.close(); var17_filter_elements = null;
				var16_filter_elements.close(); var16_filter_elements = null;
				var15_filter_elements.close(); var15_filter_elements = null;
				var14_filter_elements.close(); var14_filter_elements = null;
				var13_filter_elements.close(); var13_filter_elements = null;
				var12_filter_elements.close(); var12_filter_elements = null;
				var11_filter_elements.close(); var11_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq24_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_if_equal closure;
			public Enumerator(seq24_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq25_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq25_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq26_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq26_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq26_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq26_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq27_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_if_equal closure;
			public Enumerator(seq27_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq28_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq28_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1154", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq29_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq29_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq29_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
		javax.xml.namespace.QName var11_create_qname;
	
		public seq30_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements, javax.xml.namespace.QName var11_create_qname)
		{
			this.var1_filter_elements = var1_filter_elements;
			this.var11_create_qname = var11_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			IEnumerator var3_filter_elements;
			IEnumerator var4_filter_elements;
			IEnumerator var5_filter_elements;
			IEnumerator var6_filter_elements;
			IEnumerator var7_filter_elements;
			javax.xml.namespace.QName var8_create_qname;
			javax.xml.namespace.QName var9_create_qname;
			com.altova.mapforce.IEnumerable var10_filter_elements;
			public Enumerator(seq30_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				var3_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Interchange", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_filter_elements.moveNext()) {state = 5; return false; }
				var4_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Group", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter_elements.close(); var3_filter_elements = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var4_filter_elements.moveNext()) {state = 7; return false; }
				var5_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("Message", ""), ((com.altova.mapforce.IMFNode)(var4_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var4_filter_elements.close(); var4_filter_elements = null;
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!var5_filter_elements.moveNext()) {state = 9; return false; }
				var6_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG25", ""), ((com.altova.mapforce.IMFNode)(var5_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				var5_filter_elements.close(); var5_filter_elements = null;
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 12;				
				if (!var6_filter_elements.moveNext()) {state = 11; return false; }
				var7_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("LIN", ""), ((com.altova.mapforce.IMFNode)(var6_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 8;				
				var6_filter_elements.close(); var6_filter_elements = null;
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 12;				
				if (!var7_filter_elements.moveNext()) {state = 13; return false; }
				var8_create_qname = com.altova.functions.Core.createQName("C212", "");
				var9_create_qname = com.altova.functions.Core.createQName("QTY", "");
				var10_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("PIA", ""), ((com.altova.mapforce.IMFNode)(var6_filter_elements.current()))));
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("detail", "http://www.bbr.cl/OC_Customer"), (new seq31_seq_(((com.altova.mapforce.IMFNode)(var7_filter_elements.current())), var10_filter_elements, var8_create_qname, ((com.altova.mapforce.IMFNode)(var6_filter_elements.current())), var9_create_qname, closure.var11_create_qname)));
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 10;				
				var7_filter_elements.close(); var7_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var7_filter_elements.close(); var7_filter_elements = null;
				var6_filter_elements.close(); var6_filter_elements = null;
				var5_filter_elements.close(); var5_filter_elements = null;
				var4_filter_elements.close(); var4_filter_elements = null;
				var3_filter_elements.close(); var3_filter_elements = null;
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq31_seq_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		com.altova.mapforce.IEnumerable var3_filter_elements;
		javax.xml.namespace.QName var5_create_qname;
		com.altova.mapforce.IMFNode var15_current;
		javax.xml.namespace.QName var17_create_qname;
		javax.xml.namespace.QName var28_create_qname;
	
		public seq31_seq_(com.altova.mapforce.IMFNode var1_current, com.altova.mapforce.IEnumerable var3_filter_elements, javax.xml.namespace.QName var5_create_qname, com.altova.mapforce.IMFNode var15_current, javax.xml.namespace.QName var17_create_qname, javax.xml.namespace.QName var28_create_qname)
		{
			this.var1_current = var1_current;
			this.var3_filter_elements = var3_filter_elements;
			this.var5_create_qname = var5_create_qname;
			this.var15_current = var15_current;
			this.var17_create_qname = var17_create_qname;
			this.var28_create_qname = var28_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_seq_ closure;
			IEnumerator var2_filter_elements;
			IEnumerator var4_filter_elements;
			IEnumerator var6_filter_elements;
			IEnumerator var9_filter_elements;
			IEnumerator var7_filter_elements;
			IEnumerator var10_filter_elements;
			boolean var8_equal;
			IEnumerator var13_filter_elements;
			IEnumerator var11_filter_elements;
			IEnumerator var14_filter_elements;
			boolean var12_equal;
			IEnumerator var16_distinct_values;
			IEnumerator var18_filter_elements;
			IEnumerator var19_filter_elements;
			IEnumerator var21_filter_elements;
			IEnumerator var20_filter_elements;
			IEnumerator var22_filter_elements;
			IEnumerator var25_filter_elements;
			IEnumerator var23_filter_elements;
			IEnumerator var26_filter_elements;
			IEnumerator var24_filter_elements;
			IEnumerator var27_filter_elements;
			public Enumerator(seq31_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
					case 44:	if (moveNext_44()) return true; break;
					case 45:	if (moveNext_45()) return true; break;
					case 47:	if (moveNext_47()) return true; break;
					case 48:	if (moveNext_48()) return true; break;
					case 49:	if (moveNext_49()) return true; break;
					case 50:	if (moveNext_50()) return true; break;
					case 51:	if (moveNext_51()) return true; break;
					case 52:	if (moveNext_52()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F1082", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("position", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current()))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var2_filter_elements.close(); var2_filter_elements = null;
				var4_filter_elements = (closure.var3_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var4_filter_elements.moveNext()) {state = 6; return false; }
				var6_filter_elements = (com.altova.functions.Core.filterElements(closure.var5_create_qname, ((com.altova.mapforce.IMFNode)(var4_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 14;				
				var4_filter_elements.close(); var4_filter_elements = null;
				var9_filter_elements = (closure.var3_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!var6_filter_elements.moveNext()) {state = 8; return false; }
				var7_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7143", ""), ((com.altova.mapforce.IMFNode)(var6_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				var6_filter_elements.close(); var6_filter_elements = null;
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var7_filter_elements.moveNext()) {state = 10; return false; }
				var8_equal = com.altova.functions.Core.equal("IN", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var7_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq32_if_equal(var8_equal, ((com.altova.mapforce.IMFNode)(var6_filter_elements.current()))))))) {state = 9; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("skubuyer", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq33_cond_cond_last(var8_equal, ((com.altova.mapforce.IMFNode)(var6_filter_elements.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 7;				
				var7_filter_elements.close(); var7_filter_elements = null;
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 16;				
				if (!var9_filter_elements.moveNext()) {state = 15; return false; }
				var10_filter_elements = (com.altova.functions.Core.filterElements(closure.var5_create_qname, ((com.altova.mapforce.IMFNode)(var9_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 23;				
				var9_filter_elements.close(); var9_filter_elements = null;
				var13_filter_elements = (com.altova.functions.Core.filterElements(closure.var5_create_qname, closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 18;				
				if (!var10_filter_elements.moveNext()) {state = 17; return false; }
				var11_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7143", ""), ((com.altova.mapforce.IMFNode)(var10_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 14;				
				var10_filter_elements.close(); var10_filter_elements = null;
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 18;				
				if (!var11_filter_elements.moveNext()) {state = 19; return false; }
				var12_equal = com.altova.functions.Core.equal("VN", com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var11_filter_elements.current()))));
				if (!((Boolean)com.altova.functions.Core.first((new seq35_if_equal(var12_equal, ((com.altova.mapforce.IMFNode)(var10_filter_elements.current()))))))) {state = 18; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("skuvendor", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box((java.lang.String)com.altova.functions.Core.first((new seq36_cond_cond_last(var12_equal, ((com.altova.mapforce.IMFNode)(var10_filter_elements.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_19() throws Exception {
				state = 16;				
				var11_filter_elements.close(); var11_filter_elements = null;
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 25;				
				if (!var13_filter_elements.moveNext()) {state = 24; return false; }
				var14_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7140", ""), ((com.altova.mapforce.IMFNode)(var13_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 28;				
				var13_filter_elements.close(); var13_filter_elements = null;
				var16_distinct_values = (com.altova.functions.Core.distinctValues((new seq38_map_filter_elements(closure.var15_current)))).enumerator();
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 25;				
				if (!var14_filter_elements.moveNext()) {state = 26; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("ean13", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var14_filter_elements.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_26() throws Exception {
				state = 23;				
				var14_filter_elements.close(); var14_filter_elements = null;
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 28;				
				if (!var16_distinct_values.moveNext()) {state = 29; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("productdescription", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(((java.lang.String)(var16_distinct_values.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_29() throws Exception {
				state = 31;				
				var16_distinct_values.close(); var16_distinct_values = null;
				var18_filter_elements = (com.altova.functions.Core.filterElements(closure.var17_create_qname, closure.var15_current)).enumerator();
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 33;				
				if (!var18_filter_elements.moveNext()) {state = 32; return false; }
				var19_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C186", ""), ((com.altova.mapforce.IMFNode)(var18_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 38;				
				var18_filter_elements.close(); var18_filter_elements = null;
				var21_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG28", ""), closure.var15_current)).enumerator();
				return false;
			}
			private boolean moveNext_33() throws Exception {
				state = 35;				
				if (!var19_filter_elements.moveNext()) {state = 34; return false; }
				var20_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F6060", ""), ((com.altova.mapforce.IMFNode)(var19_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 31;				
				var19_filter_elements.close(); var19_filter_elements = null;
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 35;				
				if (!var20_filter_elements.moveNext()) {state = 36; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("quantityumc", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var20_filter_elements.current()))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_36() throws Exception {
				state = 33;				
				var20_filter_elements.close(); var20_filter_elements = null;
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 40;				
				if (!var21_filter_elements.moveNext()) {state = 39; return false; }
				var22_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("PRI", ""), ((com.altova.mapforce.IMFNode)(var21_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_39() throws Exception {
				state = 47;				
				var21_filter_elements.close(); var21_filter_elements = null;
				var25_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("MOA", ""), closure.var15_current)).enumerator();
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 42;				
				if (!var22_filter_elements.moveNext()) {state = 41; return false; }
				var23_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C509", ""), ((com.altova.mapforce.IMFNode)(var22_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 38;				
				var22_filter_elements.close(); var22_filter_elements = null;
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 44;				
				if (!var23_filter_elements.moveNext()) {state = 43; return false; }
				var24_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F5118", ""), ((com.altova.mapforce.IMFNode)(var23_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_43() throws Exception {
				state = 40;				
				var23_filter_elements.close(); var23_filter_elements = null;
				return false;
			}
			private boolean moveNext_44() throws Exception {
				state = 44;				
				if (!var24_filter_elements.moveNext()) {state = 45; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("listcost", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.doubleToString(com.altova.CoreTypes.decimalToDouble(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var24_filter_elements.current()))))))));
				pos++;
				return true;
			}
			private boolean moveNext_45() throws Exception {
				state = 42;				
				var24_filter_elements.close(); var24_filter_elements = null;
				return false;
			}
			private boolean moveNext_47() throws Exception {
				state = 49;				
				if (!var25_filter_elements.moveNext()) {state = 48; return false; }
				var26_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C516", ""), ((com.altova.mapforce.IMFNode)(var25_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_48() throws Exception {
				state = 0;				
				var25_filter_elements.close(); var25_filter_elements = null;
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("predistributions", "http://www.bbr.cl/OC_Customer"), (new seq39_map_filter_elements(closure.var15_current, closure.var28_create_qname, closure.var17_create_qname)));
				pos++;
				return true;
			}
			private boolean moveNext_49() throws Exception {
				state = 51;				
				if (!var26_filter_elements.moveNext()) {state = 50; return false; }
				var27_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F5004", ""), ((com.altova.mapforce.IMFNode)(var26_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_50() throws Exception {
				state = 47;				
				var26_filter_elements.close(); var26_filter_elements = null;
				return false;
			}
			private boolean moveNext_51() throws Exception {
				state = 51;				
				if (!var27_filter_elements.moveNext()) {state = 52; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("listprice", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.doubleToString(com.altova.CoreTypes.decimalToDouble(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var27_filter_elements.current()))))))));
				pos++;
				return true;
			}
			private boolean moveNext_52() throws Exception {
				state = 49;				
				var27_filter_elements.close(); var27_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				var7_filter_elements.close(); var7_filter_elements = null;
				var6_filter_elements.close(); var6_filter_elements = null;
				var4_filter_elements.close(); var4_filter_elements = null;
				var11_filter_elements.close(); var11_filter_elements = null;
				var10_filter_elements.close(); var10_filter_elements = null;
				var9_filter_elements.close(); var9_filter_elements = null;
				var14_filter_elements.close(); var14_filter_elements = null;
				var13_filter_elements.close(); var13_filter_elements = null;
				var16_distinct_values.close(); var16_distinct_values = null;
				var20_filter_elements.close(); var20_filter_elements = null;
				var19_filter_elements.close(); var19_filter_elements = null;
				var18_filter_elements.close(); var18_filter_elements = null;
				var24_filter_elements.close(); var24_filter_elements = null;
				var23_filter_elements.close(); var23_filter_elements = null;
				var22_filter_elements.close(); var22_filter_elements = null;
				var21_filter_elements.close(); var21_filter_elements = null;
				var27_filter_elements.close(); var27_filter_elements = null;
				var26_filter_elements.close(); var26_filter_elements = null;
				var25_filter_elements.close(); var25_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq32_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_if_equal closure;
			public Enumerator(seq32_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7140", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq33_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq33_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7140", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq34_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq34_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq34_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq35_if_equal implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq35_if_equal(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_if_equal closure;
			public Enumerator(seq35_if_equal closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 2; return false; }
				current = com.altova.functions.Core.exists(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7140", ""), closure.var2_current));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.parseBoolean("false");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq36_cond_cond_last implements IEnumerable
	{
		boolean var1_equal;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq36_cond_cond_last(boolean var1_equal, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_equal = var1_equal;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_cond_cond_last closure;
			com.altova.mapforce.IEnumerable var3_filter_elements;
			public Enumerator(seq36_cond_cond_last closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(closure.var1_equal)) {state = 0; return false; }
				var3_filter_elements = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7140", ""), closure.var2_current));
				if (!(com.altova.functions.Core.exists(var3_filter_elements))) {state = 0; return false; }
				current = (java.lang.String)com.altova.functions.Core.last((new seq37_map_filter_elements(var3_filter_elements)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements;
	
		public seq37_map_filter_elements(com.altova.mapforce.IEnumerable var1_filter_elements)
		{
			this.var1_filter_elements = var1_filter_elements;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq37_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (closure.var1_filter_elements).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq38_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq38_map_filter_elements(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq38_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			IEnumerator var3_filter_elements;
			IEnumerator var4_filter_elements;
			public Enumerator(seq38_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("IMD", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				var3_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C273", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var3_filter_elements.moveNext()) {state = 5; return false; }
				var4_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F7008", ""), ((com.altova.mapforce.IMFNode)(var3_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter_elements.close(); var3_filter_elements = null;
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var4_filter_elements.moveNext()) {state = 7; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_filter_elements.current())));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				var4_filter_elements.close(); var4_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements.close(); var4_filter_elements = null;
				var3_filter_elements.close(); var3_filter_elements = null;
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq39_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		javax.xml.namespace.QName var4_create_qname;
		javax.xml.namespace.QName var5_create_qname;
	
		public seq39_map_filter_elements(com.altova.mapforce.IMFNode var1_current, javax.xml.namespace.QName var4_create_qname, javax.xml.namespace.QName var5_create_qname)
		{
			this.var1_current = var1_current;
			this.var4_create_qname = var4_create_qname;
			this.var5_create_qname = var5_create_qname;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq39_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			IEnumerator var3_filter_elements;
			public Enumerator(seq39_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("SG33", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				var3_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("LOC", ""), ((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_filter_elements.moveNext()) {state = 5; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("predistribution", "http://www.bbr.cl/OC_Customer"), (new seq40_seq_(((com.altova.mapforce.IMFNode)(var3_filter_elements.current())), closure.var4_create_qname, closure.var5_create_qname, ((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var3_filter_elements.close(); var3_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter_elements.close(); var3_filter_elements = null;
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq40_seq_ implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		javax.xml.namespace.QName var3_create_qname;
		javax.xml.namespace.QName var4_create_qname;
		com.altova.mapforce.IMFNode var5_current;
	
		public seq40_seq_(com.altova.mapforce.IMFNode var1_current, javax.xml.namespace.QName var3_create_qname, javax.xml.namespace.QName var4_create_qname, com.altova.mapforce.IMFNode var5_current)
		{
			this.var1_current = var1_current;
			this.var3_create_qname = var3_create_qname;
			this.var4_create_qname = var4_create_qname;
			this.var5_current = var5_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq40_seq_ closure;
			IEnumerator var2_filter_elements;
			IEnumerator var6_filter_elements;
			IEnumerator var7_filter_elements;
			IEnumerator var8_filter_elements;
			public Enumerator(seq40_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C517", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(closure.var3_create_qname, (new seq41_map_filter_elements(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var2_filter_elements.close(); var2_filter_elements = null;
				var6_filter_elements = (com.altova.functions.Core.filterElements(closure.var4_create_qname, closure.var5_current)).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var6_filter_elements.moveNext()) {state = 6; return false; }
				var7_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("C186", ""), ((com.altova.mapforce.IMFNode)(var6_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var6_filter_elements.close(); var6_filter_elements = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!var7_filter_elements.moveNext()) {state = 8; return false; }
				var8_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F6060", ""), ((com.altova.mapforce.IMFNode)(var7_filter_elements.current())))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				var7_filter_elements.close(); var7_filter_elements = null;
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 9;				
				if (!var8_filter_elements.moveNext()) {state = 10; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("quantity", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var8_filter_elements.current()))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 7;				
				var8_filter_elements.close(); var8_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				var8_filter_elements.close(); var8_filter_elements = null;
				var7_filter_elements.close(); var7_filter_elements = null;
				var6_filter_elements.close(); var6_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq41_map_filter_elements implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq41_map_filter_elements(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq41_map_filter_elements closure;
			IEnumerator var2_filter_elements;
			public Enumerator(seq41_map_filter_elements closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("F3225", ""), closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("code", "http://www.bbr.cl/OC_Customer"), com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements.close(); var2_filter_elements = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements.close(); var2_filter_elements = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_ORDERS;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_ORDERS)
		{
			this.var1_instance_ORDERS = var1_instance_ORDERS;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_create_element;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_create_element = ((new main(closure.var1_instance_ORDERS))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_create_element.moveNext()) {state = 3; return false; }
				current = var2_create_element.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_create_element.close(); var2_create_element = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_create_element.close(); var2_create_element = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.ITextNode varORDERSInstance;

	public void run(String ORDERSSourceFilename, String OC_CustomerTargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + ORDERSSourceFilename + "...\n");
		com.altova.io.FileInput ORDERSSource = new com.altova.io.FileInput(ORDERSSourceFilename);
		// open target stream
		com.altova.io.FileOutput OC_CustomerTarget = new com.altova.io.FileOutput(OC_CustomerTargetFilename);

		// run
		run(ORDERSSource, OC_CustomerTarget);

		// close source streams
		ORDERSSource.close();
		// close target stream
		writeTrace("Saving " + OC_CustomerTargetFilename + "...\n");
		OC_CustomerTarget.close();
	}


	// main entry point

	public void run(com.altova.io.Input ORDERSSource, com.altova.io.Output OC_CustomerTarget) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		bbr.b2b.extractors.mappings.ORDERS.ORDERSDocument ORDERSDocument = new bbr.b2b.extractors.mappings.ORDERS.ORDERSDocument();
		ORDERSDocument.setEncoding( "ISO-8859-1", false, false );
		ORDERSDocument.parse(ORDERSSource);
		varORDERSInstance = ORDERSDocument.getGenerator();
	
		ORDERSSource.close();

		// Create the target
		org.w3c.dom.Document OC_Customer2Doc = (OC_CustomerTarget.getType() == com.altova.io.Output.IO_DOM) ? OC_CustomerTarget.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.text.TextDocumentAsMFNodeAdapter(varORDERSInstance, ORDERSSource.getFilename()));

		com.altova.xml.MFDOMWriter.write(mapping, OC_Customer2Doc);
		// Close the target
		XmlTreeOperations.saveDocument(OC_Customer2Doc, OC_CustomerTarget, "UTF-8", false, false, true);

		
		if (runDoesCloseAll)
		{
			ORDERSSource.close();
			OC_CustomerTarget.close();
		}
	}



}
