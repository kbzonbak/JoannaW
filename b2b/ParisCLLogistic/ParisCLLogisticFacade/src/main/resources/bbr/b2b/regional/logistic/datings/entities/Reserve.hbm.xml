<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
	Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
	<class name="bbr.b2b.regional.logistic.datings.entities.Reserve" table="RESERVE" 
		entity-name="bbr.b2b.regional.logistic.datings.entities.Reserve" schema="LOGISTICA">
		<id name="id" type="java.lang.Long">
			<column name="ID" />
			<generator class="identity">
				<param name="sequence">RESERVE_SEQUENCE</param>
				<param name="parameters">AS BIGINT CACHE 100</param>
			</generator>
		</id>
		
		<property name="when" type="timestamp" column="WHEN1"/>				
					
		<many-to-one name="location"
			class="bbr.b2b.regional.logistic.locations.entities.Location" column="LOCATION_ID" 
			not-null="true" insert="true" update="true"/>					
				
	 	<set name="reservedetail" inverse="true" cascade="delete, delete-orphan">
			<key column="RESERVE_ID" />
			<one-to-many class="bbr.b2b.regional.logistic.datings.entities.ReserveDetail" />
		</set>
					
		<sql-query name="getReserveData">
			<![CDATA[	
				select D.CODE as dockCode, M.STARTS as start, M.ENDS as end
				  from LOGISTICA.RESERVEDETAIL RD JOIN
				  	   LOGISTICA.MODULE M ON M.ID = RD.MODULE_ID JOIN
					   LOGISTICA.DOCK D ON D.ID = RD.DOCK_ID
				WHERE RESERVE_ID = :reserveid
			]]>
		</sql-query>
		
		<sql-query name="getReservesByDateAndLocation">
			<![CDATA[				
				SELECT DISTINCT 
					R.WHEN1 as when, R.ID, R.LOCATION_ID as locationid 
				from LOGISTICA.RESERVE R 
				left outer join LOGISTICA.LOCATION L on (L.ID = R.LOCATION_ID) 
				where (R.WHEN1 >= :since) and (R.WHEN1 < :until) and (L.ID = :locationid)
			]]>
		</sql-query>
				
		<sql-query name="doDeleteReserves">
			<![CDATA[				
				delete from LOGISTICA.RESERVE where ID in (:reserveids)
			]]>
		</sql-query>			
	</class>
</hibernate-mapping>
