<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
    Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
    <class name="bbr.b2b.regional.logistic.deliveries.entities.BulkDetail" table="BULKDETAIL" 
    	entity-name="bbr.b2b.regional.logistic.deliveries.entities.BulkDetail" schema="LOGISTICA"> 
        <composite-id name="id" class="bbr.b2b.regional.logistic.deliveries.entities.BulkDetailId">
			<key-property name="bulkid" type="java.lang.Long" column="BULK_ID" />
			<key-property name="orderid" type="java.lang.Long" column="ORDER_ID" />
			<key-property name="deliveryid" type="java.lang.Long" column="DELIVERY_ID" />
			<key-property name="itemid" type="java.lang.Long" column="ITEM_ID" />
			<key-property name="locationid" type="java.lang.Long" column="LOCATION_ID" />			
		</composite-id>

        <property name="units" type="java.lang.Double" not-null="true"></property>
        <property name="refdocument" type="java.lang.String" not-null="false"></property>
                       
        <many-to-one name="orderdeliverydetail" not-null="true" insert="false" update="false" 
			class="bbr.b2b.regional.logistic.deliveries.entities.OrderDeliveryDetail">
			<column name="ORDER_ID"></column>
			<column name="DELIVERY_ID"></column>
			<column name="ITEM_ID"></column>
			<column name="LOCATION_ID"></column>
		</many-to-one>
		
		<many-to-one name="bulk" not-null="true" insert="false" update="false" 
			class="bbr.b2b.regional.logistic.deliveries.entities.Bulk">
			<column name="BULK_ID"></column>
		</many-to-one>
		
		<many-to-one name="taxdocument" class="bbr.b2b.regional.logistic.taxdocuments.entities.TaxDocument" column="TAXDOCUMENT_ID" />	
		
		<sql-query name="getBulkDetailSummary">
			<![CDATA[				
				SELECT 
					CAST(COUNT(DISTINCT(bx.id)) AS INT) AS boxcount,
					CAST(COUNT(DISTINCT(pl.id)) AS INT) AS palletcount,
					SUM(bd.units) AS packedunits,
					bd.order_id AS orderid,
					bk.department_id AS departmentid, 
					bd.delivery_id AS deliveryid
				FROM
					logistica.bulk AS bk LEFT JOIN
					logistica.box AS bx ON bx.id = bk.id LEFT JOIN
					logistica.pallet AS pl ON pl.id = bk.id JOIN 
					logistica.bulkdetail AS bd ON bd.bulk_id = bk.id 
				WHERE
					bd.delivery_id = :deliveryid
				GROUP BY
					bd.order_id, bk.department_id, bd.delivery_id
			]]>
		</sql-query>
		
		<sql-query name="getAsnDetailsByDelivery">
			<![CDATA[				
				SELECT DISTINCT
					CASE WHEN vd.code = 'IMP' 
						 THEN od.asnimp
						 ELSE dt.number
						 END AS asnnumber,
					oc.id AS orderid,
					oc.number AS ordernumber,
					CASE WHEN vd.code = 'IMP' 
						 THEN oc.vendorcodeimp
						 ELSE vd.code
						 END AS vendorcode,
					COALESCE(oc.distributionordernumber, '') AS distributionordernumber,
					od.deliveryindex AS orderdeliveryindex,
					pdd.sequence AS predeliverysequence,
					bk.id AS bulkid,
					bk.code AS bulkcode,
					COALESCE(bd.refdocument, '') AS refdocument,
					lo.id AS destinationlocationid,
					lo.code AS destinationlocationcode,
					it.id AS itemid,
					it.internalcode AS iteminternalcode,
					it.innerpack AS iteminnerpack,
					vi.vendoritemcode AS vendoritemcode,
					bd.units AS units
				FROM
					logistica.dating AS dt JOIN
					logistica.orderdelivery AS od ON od.delivery_id = dt.delivery_id JOIN
					logistica.order AS oc ON oc.id = od.order_id JOIN
					logistica.vendor AS vd ON vd.id = oc.vendor_id JOIN
					logistica.predeliverydetail AS pdd ON pdd.order_id = oc.id JOIN
					logistica.bulk AS bk ON bk.delivery_id = od.delivery_id AND bk.order_id = od.order_id JOIN
					logistica.bulkdetail AS bd ON bd.bulk_id = bk.id AND bd.location_id = pdd.location_id AND bd.item_id = pdd.item_id JOIN
					logistica.location AS lo ON lo.id = bd.location_id JOIN
					logistica.item AS it ON it.id = bd.item_id JOIN
					logistica.vendoritem AS vi ON vi.vendor_id = vd.id AND vi.item_id = it.id
				WHERE
					dt.delivery_id = :deliveryid
			]]>
		</sql-query>
		
		<sql-query name="getTaxDocumentIdsByDelivery">
			<![CDATA[				
				SELECT DISTINCT
					taxdocument_id
				FROM
					logistica.bulkdetail 
				WHERE
					delivery_id = :deliveryid AND taxdocument_id IS NOT NULL
			]]>
		</sql-query>
		
		<sql-query name="getTaxDocumentIdsByBulks">
			<![CDATA[				
				SELECT DISTINCT
					taxdocument_id
				FROM
					logistica.bulkdetail 
				WHERE
					bulk_id IN (:bulkids) AND taxdocument_id IS NOT NULL
			]]>
		</sql-query>
		
		<sql-query name="doCreateTempTablePredistributedPackingList">
     		<![CDATA[
     			CREATE TEMP TABLE predistributedplupload (
					 		line INTEGER,
					 		containernumber VARCHAR,
					 		lpncode VARCHAR,
					 		locationcode VARCHAR,
					 		iteminternalcode VARCHAR,
					 		vendoritemcode VARCHAR,
					 		ordernumber BIGINT,
					 		units DOUBLE PRECISION,
					 		taxdocumentnumber BIGINT,
					 		order_id BIGINT,
					 		vendor_id BIGINT,
					 		location_id BIGINT,
					 		item_id BIGINT,
					 		flowtype_id BIGINT,
					 		distributionordernumber VARCHAR,
					 		sequence INTEGER,
					 		innerpack INTEGER,
					 		vendorcode VARCHAR,
					 		vendorname VARCHAR,
					 		logisticcode VARCHAR,
					 		locationshortname VARCHAR,
					 		flowtypename VARCHAR
					  ) ON COMMIT DROP;
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCreateTempTableError">
     		<![CDATA[
     			CREATE TEMP TABLE predistributedplerror ( 
					line INTEGER,
					error VARCHAR
				) ON COMMIT DROP;
     		]]>
     	</sql-query>
     	
     	<sql-query name="doFillOrderDetailData">
     		<![CDATA[
     	     	UPDATE predistributedplupload AS predistributedpl
				SET
					order_id = oc.id,
					vendor_id = CASE WHEN vd.rut = 'IMP'
									 THEN ovd.id
									 ELSE vd.id
									 END,
					item_id = it.id,
					flowtype_id = ft.id,
					distributionordernumber = COALESCE(oc.distributionordernumber, ''),
					sequence = pdd.sequence,
					innerpack = it.innerpack,
					vendorcode = CASE WHEN vd.rut = 'IMP'
										 THEN ovd.code
										 ELSE vd.code
										 END,
					vendorname = CASE WHEN vd.rut = 'IMP'
										 THEN ovd.name
										 ELSE vd.name
										 END,
					logisticcode = CASE WHEN vd.rut = 'IMP'
										 THEN ovd.logisticscode
										 ELSE vd.logisticscode
										 END,
					flowtypename = ft.name,
					vendoritemcode = vi.vendoritemcode
				FROM
					logistica.order AS oc JOIN
					logistica.orderdetail AS od ON od.order_id = oc.id JOIN
					logistica.predeliverydetail AS pdd ON pdd.order_id = od.order_id AND pdd.item_id = od.item_id AND
														  pdd.location_id = oc.deliverylocation_id JOIN
					logistica.item AS it ON it.id = pdd.item_id JOIN
					logistica.flowtype AS ft ON ft.id = it.flowtype_id JOIN
					logistica.vendor AS vd ON vd.id = oc.vendor_id JOIN
					logistica.vendoritem AS vi ON vi.vendor_id = vd.id AND vi.item_id = it.id LEFT JOIN
					logistica.vendor AS ovd ON ovd.code = oc.vendorcodeimp
				WHERE
					oc.number = predistributedpl.ordernumber AND
					it.internalcode = predistributedpl.iteminternalcode
			]]>
     	</sql-query>
     	
     	<sql-query name="doFillDestinationLocationData">
     		<![CDATA[
     	     	UPDATE predistributedplupload AS predistributedpl
				SET
					location_id = lo.id,
					locationshortname = upper(lo.shortname)
				FROM
					logistica.location AS lo
				WHERE
					lo.code = predistributedpl.locationcode
			]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueLpnItems">
     		<![CDATA[
				WITH foo AS(
					SELECT
						lpncode, iteminternalcode
					FROM
						predistributedplupload
					GROUP BY lpncode, iteminternalcode
					HAVING COUNT(1) > 1
				)
				INSERT INTO predistributedplerror (line, error)
					SELECT
						predistributedpl.line,
						'Fila ' || predistributedpl.line || ': El valor de LPN ' || predistributedpl.lpncode ||
															' y SKU ' || predistributedpl.iteminternalcode ||
															' se está informando en más de una fila'										
					FROM
						predistributedplupload AS predistributedpl JOIN
	 					foo ON foo.lpncode = predistributedpl.lpncode AND
	 						   foo.iteminternalcode = predistributedpl.iteminternalcode
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueOrderByLpn">
     		<![CDATA[
				WITH foo AS(
					SELECT
						lpncode, COUNT(DISTINCT ordernumber) AS orders
					FROM
						predistributedplupload
					GROUP BY lpncode
				)
				INSERT INTO predistributedplerror (line, error)
					SELECT
						predistributedpl.line,
						'Fila ' || predistributedpl.line || ': El valor de LPN ' || predistributedpl.lpncode ||
															' se está informando para más de una orden de compra'										
					FROM
						predistributedplupload AS predistributedpl JOIN
	 					foo ON foo.lpncode = predistributedpl.lpncode
	 				WHERE
	 					foo.orders > 1
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueDestinationLocationByLpn">
     		<![CDATA[
				WITH foo AS(
					SELECT
						lpncode, COUNT(DISTINCT locationcode) AS locations
					FROM
						predistributedplupload
					GROUP BY lpncode
				)
				INSERT INTO predistributedplerror (line, error)
					SELECT
						predistributedpl.line,
						'Fila ' || predistributedpl.line || ': El valor de LPN ' || predistributedpl.lpncode ||
															' se está informando para más de una tienda'										
					FROM
						predistributedplupload AS predistributedpl JOIN
	 					foo ON foo.lpncode = predistributedpl.lpncode
	 				WHERE
	 					foo.locations > 1
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueContainer">
     		<![CDATA[
				WITH foo AS(
					SELECT
						COUNT(DISTINCT containernumber) AS containers
					FROM
						predistributedplupload
				)
				INSERT INTO predistributedplerror (line, error)
					SELECT
						0,
						'El valor de contenedor no es igual en todas las filas del archivo'
					FROM
						foo
	 				WHERE
	 					containers > 1
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckValidOrders">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						predistributedpl.line,
						'Fila ' || predistributedpl.line || ': La orden de compra ' || predistributedpl.ordernumber || ' no existe en el sistema'
					FROM
						predistributedplupload AS predistributedpl LEFT JOIN
						logistica.order AS oc ON oc.number = predistributedpl.ordernumber
					WHERE
						oc.id IS NULL
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckValidVendors">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						predistributedpl.line,
						'Fila ' || predistributedpl.line || ': El proveedor asociado a la OC ' || predistributedpl.ordernumber ||
															' es de tipo nacional'
					FROM
						predistributedplupload AS predistributedpl LEFT JOIN
						logistica.order AS oc ON oc.number = predistributedpl.ordernumber LEFT JOIN
						logistica.vendor AS vd ON vd.id = oc.vendor_id
					WHERE
						vd.domestic IS TRUE
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueDeliveryLocation">
     		<![CDATA[
				WITH foo AS(
					SELECT
						COUNT(DISTINCT oc.deliverylocation_id) AS locations
					FROM
						predistributedplupload AS predistributedpl LEFT JOIN
						logistica.order AS oc ON oc.number = predistributedpl.ordernumber
				)
				INSERT INTO predistributedplerror (line, error)
					SELECT
						0,
						'Las OC ingresadas en el archivo no poseen el mismo lugar de entrega'
					FROM
						foo
	 				WHERE
	 					locations > 1
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckValidDeliveryLocation">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT DISTINCT
						0,
						'El lugar de entrega de las OC no es el mismo que el seleccionado en el filtro del reporte'
					FROM
						predistributedplupload AS predistributedpl LEFT JOIN
						logistica.order AS oc ON oc.number = predistributedpl.ordernumber
					WHERE
						oc.deliverylocation_id != :locationid
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckValidOrderItems">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						line,
						'Fila ' || line || ': El producto con SKU ' || iteminternalcode || ' no pertenece a la OC ' || ordernumber 
					FROM
						predistributedplupload
					WHERE
						item_id IS NULL
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckValidDestinationLocations">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						line,
						'Fila ' || line || ': La tienda con código ' || locationcode || ' no existe en el sistema' 
					FROM
						predistributedplupload
					WHERE
						location_id IS NULL
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckLpnDestinationLocation">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						line,
						'Fila ' || line || ': El LPN ' || lpncode || ' no corresponde con la tienda código ' || locationcode 
					FROM
						predistributedplupload
					WHERE
						substring(lpncode from 1 for 3) != locationshortname
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckLpnVendorLogisticCode">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						line,
						'Fila ' || line || ': El LPN ' || lpncode || ' no corresponde con el proveedor ' || vendorname ||
										   ' (código ' || vendorcode || ')' 
					FROM
						predistributedplupload
					WHERE
						substring(lpncode from 4 for 3) != logisticcode
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckLpnCorrelative">
     		<![CDATA[
				INSERT INTO predistributedplerror (line, error)
					SELECT
						line,
						'Fila ' || line || ': El LPN ' || lpncode || ' no tiene un correlativo numérico' 
					FROM
						predistributedplupload
					WHERE
						substring(lpncode from 7 for 5) ~ '^[0-9]+$' IS FALSE
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckLpnFlowType">
     		<![CDATA[
				WITH foo AS(
					SELECT
						lpncode,
						COUNT(DISTINCT flowtype_id) AS flowtypes
					FROM
						predistributedplupload
					GROUP BY
						lpncode
				)
				INSERT INTO predistributedplerror (line, error)
					SELECT
						predistributedpl.line,
						'Fila ' || predistributedpl.line || ': El LPN ' || predistributedpl.lpncode ||
															' contiene productos de diferentes tipos de flujo'
					FROM
						predistributedplupload AS predistributedpl JOIN
	 					foo ON foo.lpncode = predistributedpl.lpncode
	 				WHERE
	 					foo.flowtypes > 1
     		]]>
     	</sql-query>
     	     			
    </class>
</hibernate-mapping>