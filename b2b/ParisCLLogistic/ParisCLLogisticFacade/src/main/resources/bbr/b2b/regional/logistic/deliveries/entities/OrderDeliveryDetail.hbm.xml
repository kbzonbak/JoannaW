<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
    Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
    <class name="bbr.b2b.regional.logistic.deliveries.entities.OrderDeliveryDetail" table="ORDERDELIVERYDETAIL" 
    	entity-name="bbr.b2b.regional.logistic.deliveries.entities.OrderDeliveryDetail" schema="LOGISTICA" >
        <composite-id name="id" class="bbr.b2b.regional.logistic.deliveries.entities.OrderDeliveryDetailId">
			<key-property name="orderid" type="java.lang.Long" column="ORDER_ID" />
			<key-property name="deliveryid" type="java.lang.Long" column="DELIVERY_ID" />
			<key-property name="itemid" type="java.lang.Long" column="ITEM_ID" />
			<key-property name="locationid" type="java.lang.Long" column="LOCATION_ID" />			
		</composite-id>

		<property name="pendingunits" type="java.lang.Double" not-null="true"></property>		
        <property name="availableunits" type="java.lang.Double" not-null="true"></property>
        <property name="receivedunits" type="java.lang.Double" not-null="true"></property>
                       
        <many-to-one name="orderdelivery" not-null="true" insert="false" update="false" 
			class="bbr.b2b.regional.logistic.deliveries.entities.OrderDelivery">
			<column name="ORDER_ID"></column>
			<column name="DELIVERY_ID"></column>
		</many-to-one>
		<many-to-one name="item" not-null="true" insert="false" update="false" 
			class="bbr.b2b.regional.logistic.items.entities.Item">
			<column name="ITEM_ID"></column>
		</many-to-one>	
		<many-to-one name="location" not-null="true" insert="false" update="false" 
			class="bbr.b2b.regional.logistic.locations.entities.Location">
			<column name="LOCATION_ID"></column>
		</many-to-one>				
		
		<sql-query name="getAssignedDatingTotalizerByDateLocationAndDockType">
			<![CDATA[               
				WITH aa AS(
						SELECT DISTINCT
				 			dt.delivery_id,
	 			 			rd.dock_id
	 	   				FROM
	 	   					logistica.reservedetail AS rd JOIN
	 	   					logistica.dock AS dk ON dk.id = rd.dock_id JOIN
	 	   					logistica.reserve AS rs ON rd.reserve_id = rs.id JOIN
	 	   					logistica.dating AS dt ON dt.id = rs.id
		  	 			WHERE
		  	 				rs.when1 >= :since AND rs.when1 < :until AND rs.location_id = :locationid AND dk.docktype_id = :docktypeid),
	 				 bb AS(
	 				 	SELECT
	 			 			odd.delivery_id,
	 			 			SUM(odd.availableunits) AS units
		   				FROM
		   					logistica.reserve AS rs JOIN
		   					logistica.dating AS dt ON dt.id = rs.id JOIN
		   					logistica.orderdeliverydetail AS odd ON odd.delivery_id = dt.delivery_id AND odd.location_id = rs.location_id JOIN
		   					logistica.orderdetail AS od ON od.order_id = odd.order_id AND od.item_id = odd.item_id
	 	  				WHERE
	 	  					rs.when1 >= :since AND rs.when1 < :until AND rs.location_id = :locationid
	 	  				GROUP BY odd.delivery_id)
				SELECT
	  				SUM(bb.units) AS units,
	  				aa.dock_id AS dockid 					
				FROM
					aa JOIN
					bb ON bb.delivery_id = aa.delivery_id
				GROUP BY aa.dock_id
			]]>
		</sql-query>
		
		<sql-query name="getAssignedDatingTotalizerByDateAndLocation">
			<![CDATA[               
				WITH aa AS(
						SELECT DISTINCT
				 			dt.delivery_id,
	 			 			rd.dock_id
	 	   				FROM
	 	   					logistica.reservedetail AS rd JOIN
	 	   					logistica.reserve AS rs ON rd.reserve_id = rs.id JOIN
	 	   					logistica.dating AS dt ON dt.id = rs.id
		  	 			WHERE
		  	 				rs.when1 >= :since AND rs.when1 < :until AND rs.location_id = :locationid),
	 				 bb AS(
	 				 	SELECT
	 			 			odd.delivery_id,
	 			 			SUM(odd.availableunits) AS units
		   				FROM
		   					logistica.reserve AS rs JOIN
		   					logistica.dating AS dt ON dt.id = rs.id JOIN
		   					logistica.orderdeliverydetail AS odd ON odd.delivery_id = dt.delivery_id AND odd.location_id = rs.location_id JOIN
		   					logistica.orderdetail AS od ON od.order_id = odd.order_id AND od.item_id = odd.item_id
	 	  				WHERE
	 	  					rs.when1 >= :since AND rs.when1 < :until AND rs.location_id = :locationid
	 	  				GROUP BY odd.delivery_id)
				SELECT
	  				SUM(bb.units) AS units,
	  				aa.dock_id AS dockid 					
				FROM
					aa JOIN
					bb ON bb.delivery_id = aa.delivery_id
				GROUP BY aa.dock_id
			]]>
		</sql-query>
		
		<sql-query name="doCreateTempTableAdjustDelivery">
     		<![CDATA[
     			CREATE TEMP TABLE adjustdeliveryupload (
					 		line INTEGER,
					 		ordernumber BIGINT,
					 		locationcode VARCHAR,
					 		iteminternalcode VARCHAR,
					 		atccode VARCHAR,
					 		units DOUBLE PRECISION,
					 		bulks INTEGER,
					 		order_id BIGINT,
					 		delivery_id BIGINT,
					 		location_id BIGINT,
					 		item_id BIGINT,
					 		atc_id BIGINT,
					 		department_id BIGINT,
					 		flowtype_id BIGINT
					  ) ON COMMIT DROP;
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCreateTempTableError">
     		<![CDATA[
     			CREATE TEMP TABLE adjustdeliveryerror ( 
					line INTEGER,
					error VARCHAR
				) ON COMMIT DROP;
     		]]>
     	</sql-query>
     	
     	<sql-query name="doFillData">
     		<![CDATA[
     	     	UPDATE adjustdeliveryupload AS adjustdelivery
				SET
					bulks = CASE
								WHEN units <= 0 THEN 0
								ELSE  CAST(units / COALESCE(ia.curve, units) AS INTEGER)
							END,
					order_id = oc.id,
					delivery_id = dl.id,
					item_id = it.id,
					location_id = lo.id,
					atc_id = atc.id,
					department_id = oc.department_id,
					flowtype_id = dl.flowtype_id
				FROM
					logistica.delivery AS dl JOIN
					logistica.orderdeliverydetail AS odd ON odd.delivery_id = dl.id JOIN
					logistica.order AS oc ON oc.id = odd.order_id JOIN
					logistica.location AS lo ON lo.id = odd.location_id JOIN
					logistica.item AS it ON it.id = odd.item_id LEFT JOIN
					logistica.item_atc AS ia ON dl.hasatc IS TRUE AND ia.item_id = it.id LEFT JOIN
					logistica.atc AS atc ON atc.id = ia.atc_id
				WHERE
					dl.id = :deliveryid AND
					adjustdelivery.ordernumber = oc.number AND
					adjustdelivery.locationcode = lo.code AND
					adjustdelivery.iteminternalcode = it.internalcode AND
					(adjustdelivery.atccode IS NULL OR adjustdelivery.atccode = atc.code)
			]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueRows">
     		<![CDATA[
				WITH foo AS(
					SELECT
						ordernumber, locationcode, iteminternalcode, atccode
					FROM
						adjustdeliveryupload
					GROUP BY ordernumber, locationcode, iteminternalcode, atccode
					HAVING COUNT(1) > 1
				)
				INSERT INTO adjustdeliveryerror (line, error)
					SELECT
						adjustdelivery.line,
						'Fila ' || adjustdelivery.line || ': La combinación para `N° Orden´, `N° Local´, `SKU Paris´ y `ATC´ (opcional) ' ||
															'ya fue indicada en una fila anterior'
					FROM
						adjustdeliveryupload AS adjustdelivery JOIN
	 					foo ON foo.ordernumber = adjustdelivery.ordernumber AND
	 						   foo.locationcode = adjustdelivery.locationcode AND
	 						   foo.iteminternalcode = adjustdelivery.iteminternalcode AND
	 						   (foo.atccode IS NULL OR foo.atccode = adjustdelivery.atccode)
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckValidOrderItemLocation">
     		<![CDATA[
				INSERT INTO adjustdeliveryerror (line, error)
					SELECT
						adjustdelivery.line,
						'Fila ' || adjustdelivery.line || ': La combinación de orden de compra, local de destino, código de producto y ' ||
															'ATC (opcional) no pertenece al despacho' 
					FROM
						adjustdeliveryupload AS adjustdelivery LEFT JOIN
					  	logistica.order AS oc ON oc.id = adjustdelivery.order_id LEFT JOIN
					  	logistica.location AS lo ON lo.id = adjustdelivery.location_id LEFT JOIN
					  	logistica.item AS it ON it.id = adjustdelivery.item_id LEFT JOIN
					  	logistica.delivery AS dl ON dl.id = adjustdelivery.delivery_id LEFT JOIN
					  	logistica.atc AS atc ON atc.id = adjustdelivery.atc_id
					GROUP BY adjustdelivery.line, adjustdelivery.ordernumber, adjustdelivery.locationcode, adjustdelivery.iteminternalcode,
							 adjustdelivery.atccode, dl.hasatc
					HAVING count(oc.id) = 0 OR count(it.id) = 0 OR count(lo.id) = 0 OR (dl.hasatc IS TRUE AND count(atc.id) = 0)
     		]]>
     	</sql-query>
     	
     	<sql-query name="doCheckOrderDeliveryAdjustUnits">
			<![CDATA[
				WITH foo AS(
	    			SELECT
	    				adjustdelivery.line,
	    				(odd.pendingunits - adjustdelivery.units) AS diffunits 
	    			FROM
	    				logistica.orderdeliverydetail AS odd JOIN
	    				adjustdeliveryupload AS adjustdelivery ON adjustdelivery.order_id = odd.order_id AND
	    														  adjustdelivery.delivery_id = odd.delivery_id AND
	    														  adjustdelivery.location_id = odd.location_id AND
	    														  adjustdelivery.item_id = odd.item_id
				)
				INSERT INTO adjustdeliveryerror (line, error) 
					SELECT
						line,
						'Fila ' || line || ': La unidades sobrepasan lo comprometido originalmente'
					FROM
						foo
					WHERE
						diffunits < 0;
			]]>
		</sql-query>
		
		<sql-query name="doCheckPredeliveryAdjustUnits">
			<![CDATA[
				WITH foo1 AS(
					SELECT
						odd.order_id,
						odd.location_id,
						odd.item_id,
						SUM(odd.availableunits) AS availableunits
					FROM
						logistica.orderdeliverydetail AS odd JOIN
						logistica.delivery AS de ON de.id = odd.delivery_id JOIN
						logistica.deliverystatetype AS dst ON dst.id = de.currentstatetype_id
	    			WHERE
	    				dst.closed IS FALSE AND odd.delivery_id != :deliveryid
	    			GROUP BY
	    				odd.order_id, odd.location_id, odd.item_id
				),
				foo2 AS(
	    			SELECT
	    				adjustdelivery.ordernumber,
	    				adjustdelivery.locationcode,
	    				adjustdelivery.iteminternalcode,
	    				adjustdelivery.line,
	    				(foo1.availableunits + adjustdelivery.units - pdd.units + pdd.receivedunits + pdd.outreceivedunits) AS diffunits
	    			FROM
	    				logistica.predeliverydetail AS pdd JOIN
	    				adjustdeliveryupload AS adjustdelivery ON adjustdelivery.order_id = pdd.order_id AND
	    														  adjustdelivery.location_id = pdd.location_id AND
	    														  adjustdelivery.item_id = pdd.item_id JOIN
	    				foo1 ON foo1.order_id = pdd.order_id AND
	    						foo1.location_id = pdd.location_id AND
	    						foo1.item_id = pdd.item_id
				)
				INSERT INTO adjustdeliveryerror (line, error) 
					SELECT
						line,
						'Fila ' || line || ': Las unidades indicadas para el local ' || locationcode ||
															' y producto ' || iteminternalcode || 
															' sobrepasan lo pendiente en la orden de compra ' || ordernumber
					FROM
						foo2
					WHERE
						diffunits > 0;
			]]>
		</sql-query>
		
		<sql-query name="doCheckATCItems">
		 	<![CDATA[
				WITH foo1 AS(
					SELECT DISTINCT
						ia.atc_id,
						ia.item_id
					FROM
						adjustdeliveryupload AS adjustdelivery JOIN
						logistica.item_atc AS ia ON ia.atc_id = adjustdelivery.atc_id
					WHERE
						adjustdelivery.units > 0
				)
				INSERT INTO adjustdeliveryerror (line, error) 
					SELECT DISTINCT
						0,
						'Debe informar cantidades mayores a cero para todos los productos del ATC ' || adjustdelivery.atccode ||
															' en la OC ' || adjustdelivery.ordernumber
					FROM
						foo1 LEFT JOIN
	    				adjustdeliveryupload AS adjustdelivery ON adjustdelivery.atc_id = foo1.atc_id AND adjustdelivery.item_id = foo1.item_id
	    			WHERE
	    				adjustdelivery.item_id IS NULL OR adjustdelivery.units = 0;
		 	]]>
		</sql-query>
		
		<sql-query name="doCheckProportionalATCCurves">
		 	<![CDATA[
				INSERT INTO adjustdeliveryerror (line, error)
					SELECT DISTINCT
						adjustdelivery.line,
						'Fila ' || adjustdelivery.line || ': Para la OC ' || adjustdelivery.ordernumber || ', la cantidad a entregar del '
												'producto ' || adjustdelivery.iteminternalcode || ' no es proporcional a su valor de curva'
					FROM
						adjustdeliveryupload AS adjustdelivery JOIN
						logistica.item_atc AS ia ON ia.atc_id = adjustdelivery.atc_id AND ia.item_id = adjustdelivery.item_id
					WHERE
						adjustdelivery.units > 0 AND CAST(adjustdelivery.units AS INTEGER) % ia.curve != 0;
		 	]]>
		</sql-query>
		
		<sql-query name="doCheckCompleteATCCurves">
		 	<![CDATA[
				WITH foo1 AS(
					SELECT
						ordernumber,
						atccode,
						COUNT(DISTINCT bulks) AS variants
					FROM
						adjustdeliveryupload AS adjustdelivery
					WHERE
						units > 0
					GROUP BY
						ordernumber, atccode
				)
				INSERT INTO adjustdeliveryerror (line, error)
					SELECT DISTINCT
						0,
						'Para la OC ' || ordernumber || ', las cantidades a entregar indicadas para todos los productos del ATC ' ||
												atccode || ' no conforman curvas completas'			
					FROM
						foo1
					WHERE
						variants > 1;
		 	]]>
		</sql-query>
		
		<sql-query name="doAdjustOrderDeliveryDetailUnits">
		 	<![CDATA[
				UPDATE
					logistica.orderdeliverydetail AS odd
				SET
					availableunits = adjustdelivery.units
				FROM
					adjustdeliveryupload AS adjustdelivery
				WHERE
					adjustdelivery.order_id = odd.order_id AND
					adjustdelivery.delivery_id = odd.delivery_id AND
					adjustdelivery.location_id = odd.location_id AND
					adjustdelivery.item_id = odd.item_id
		 	]]>
		</sql-query>
		
		<sql-query name="doAdjustOrderDeliveryEstimatedUnits">
		 	<![CDATA[
		 		WITH foo AS(
					SELECT
						order_id,
						delivery_id,
						SUM(units) AS units
					FROM
						adjustdeliveryupload
	    			GROUP BY
	    				order_id, delivery_id
				) 
				UPDATE
					logistica.orderdelivery AS od
				SET
					estimatedunits = foo.units
				FROM
					foo
				WHERE
					foo.order_id = od.order_id AND
					foo.delivery_id = od.delivery_id
		 	]]>
		</sql-query>
     	
    </class>
</hibernate-mapping>