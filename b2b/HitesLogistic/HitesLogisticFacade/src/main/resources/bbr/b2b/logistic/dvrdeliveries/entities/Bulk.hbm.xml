<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
	Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
	<class name="bbr.b2b.logistic.dvrdeliveries.entities.Bulk" table="BULK" 
		entity-name="bbr.b2b.logistic.dvrdeliveries.entities.Bulk" schema="LOGISTICA">
		<id name="id" type="java.lang.Long">
			<column name="ID" />
			<generator class="identity">
				<param name="sequence">BULK_SEQUENCE</param>
				<param name="parameters">AS BIGINT CACHE 100</param>
			</generator>
		</id>
		
		<property name="lpncode" type="java.lang.String" column="LPNCODE" length="250"/>
		<property name="totalunits" type="java.lang.Double" column="TOTALUNITS"/>
		<property name="active" type="java.lang.Boolean" column="ACTIVE"/>
					
		<many-to-one name="dvrdelivery" 
			class="bbr.b2b.logistic.dvrdeliveries.entities.DvrDelivery" column="DVRDELIVERY_ID"
			not-null="true"/>			

		<many-to-one name="document" 
			class="bbr.b2b.logistic.dvrdeliveries.entities.Document" column="DOCUMENT_ID"
			not-null="false"/>			



		<!-- ************************************************************************************** -->
     	<!-- **************** SET DE QUERIES USADAS PARA CARGA DE PACKING LIST ******************** -->
     	<!-- ************************************************************************************** -->


     	<sql-query name="doCreateTempTableAsn">
     		<![CDATA[
     			CREATE TEMP TABLE asnupload
				(
					rownumber integer,
					ordernumber bigint,
					locationcode varchar,
					lpnnumber varchar,
					itemcode varchar,
					units DOUBLE PRECISION,
					documentnumber varchar,
					documenttype varchar,
					dvrorder_id bigint,
					dvrdelivery_id bigint,
					location_id bigint,
					item_id bigint,
					position integer,
					bulk_id bigint,
					document_id bigint,
					documenttype_id bigint
				) ON COMMIT DROP;

     		]]>
     	</sql-query>


     	<sql-query name="doCreateTempTableError">
     		<![CDATA[
     			CREATE TEMP TABLE asnerror
				( 
					line INTEGER,
					lpn VARCHAR,
					ocnbr VARCHAR,
					error VARCHAR
				) ON COMMIT DROP;
     		]]>
     	</sql-query>

		<sql-query name="doFillOrderData">
			<![CDATA[
				UPDATE asnupload as asn
				SET dvrorder_id  = dvroc.id
				FROM logistica.order as oc
				JOIN logistica.dvrorder as dvroc
				ON oc.id = dvroc.id
				where oc.number = asn.ordernumber
			]]>
		</sql-query>

		<sql-query name="doFillLocationData">
			<![CDATA[
				UPDATE asnupload as asn
				SET location_id = loc.id
				FROM logistica.location as loc
				WHERE asn.locationcode = loc.code
			]]>
		</sql-query>

		<sql-query name="doFillItemData">
			<![CDATA[
				UPDATE asnupload as asn
				SET item_id = it.id
				from logistica.item AS it
				WHERE it.sku = asn.itemcode
			]]>
		</sql-query>

		<sql-query name="doFillDeliveryData">
			<![CDATA[
				UPDATE asnupload as asn
				SET dvrdelivery_id = :dvrdeliveryid
			]]>
		</sql-query>	

		<sql-query name="doFillDocumenttype">
			<![CDATA[
				UPDATE asnupload as asn
				SET documenttype_id = dt.id
				from logistica.documenttype AS dt
				WHERE dt.code = asn.documenttype
			]]>
		
		</sql-query>

		<sql-query name="doFillDvrOrderDetailPosition">
			<![CDATA[
				UPDATE asnupload as asn
				SET position = dvrod.position
				FROM logistica.dvrorderdetail as dvrod
				JOIN logistica.dvrorder as dvroc
				ON dvroc.id =  dvrod.dvrorder_id
				JOIN logistica.order as oc
				ON oc.id = dvroc.id
				JOIN logistica.item as it
				ON it.id = dvrod.item_id
				WHERE it.sku = 	asn.itemcode
				AND oc.number = asn.ordernumber
			]]>
		</sql-query>

		<sql-query name="doCheckUniqueRows">
			<![CDATA[
				WITH foo as (
					SELECT asn.rownumber, asn.ordernumber, asn.locationcode, asn.itemcode, asn.lpnnumber
					FROM asnupload as asn
				),

				foo2 as (
					SELECT asn.ordernumber, asn.locationcode, asn.itemcode, asn.lpnnumber, count(1) as c
					FROM asnupload as asn
					GROUP BY asn.ordernumber, asn.locationcode, asn.itemcode, asn.lpnnumber
				)
				INSERT INTO asnerror (line, error)
				SELECT 0, 'Filas ' || string_agg(CAST(foo.rownumber AS VARCHAR), ', ') || ' Combinación de  orden ' ||  foo2.ordernumber || 
							', local ' || foo2.locationcode || ', Item SKU ' || foo2.itemcode || ', LPN ' || foo2.lpnnumber || ' no es única. Favor agrupar'
							
				FROM foo
				JOIN foo2 
				ON foo.ordernumber = foo2.ordernumber
				AND foo.locationcode = foo2.locationcode
				AND foo.itemcode = foo2.itemcode
				AND foo.lpnnumber = foo2.lpnnumber
				WHERE foo2.c > 1
				GROUP BY foo2.ordernumber, foo2.locationcode, foo2.itemcode, foo2.lpnnumber
			]]>
		</sql-query>

		<sql-query name="doCheckOrderExists">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber, 
				'Fila ' || asn.rownumber || ': La orden de compra N° ' || asn.ordernumber || ' no existe'
				FROM asnupload as asn
				LEFT JOIN logistica.order as oc
				ON oc.number = asn.ordernumber
				LEFT JOIN logistica.dvrorder as dvroc
				ON oc.number = asn.ordernumber
				WHERE dvroc.id IS NULL
			]]>
		</sql-query>

		<sql-query name="doCheckOrderAssignedVendor">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,
				'Fila ' || asn.rownumber || ': La orden de compra N° ' || asn.ordernumber || ' no está asignada al proveedor ' || :vendorname
				FROM asnupload as asn
				JOIN logistica.order as oc
				ON oc.number = asn.ordernumber
				JOIN logistica.dvrorder as dvroc
				ON oc.number = asn.ordernumber
				WHERE oc.vendor_id != :vendorid
			]]>
		</sql-query>

		<sql-query name="doCheckOCValidState">
			<![CDATA[			
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,
				'Linea ' || asn.rownumber || ': La orden de compra N° ' || asn.ordernumber || ' no se encuentra en un estado vigente'
				FROM asnupload as asn
				JOIN logistica.order as oc
				ON oc.number = asn.ordernumber
				JOIN logistica.dvrorder as dvroc
				ON oc.id = dvroc.id
				JOIN logistica.dvrorderstatetype as dvrost
				ON dvrost.id = dvroc.currentstatetype_id
				WHERE dvrost.valid IS FALSE
			]]>
		</sql-query>

		<sql-query name="doCheckOCExpirationDate">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,
				'Línea ' || asn.rownumber || ': La orden de compra N° ' || asn.ordernumber || ' se encuentra vencida.'
				FROM asnupload as asn
				JOIN logistica.order as oc
				ON oc.number = asn.ordernumber
				JOIN logistica.dvrorder as dvroc
				ON oc.id = dvroc.id
				WHERE dvroc.expiration < :now
			
			]]>
		</sql-query>

		<sql-query name="doCheckItemExists">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber, 
				'Línea ' || asn.rownumber || ': El producto con código Hites ' || asn.itemcode || ' no existe'
				FROM asnupload as asn
				LEFT JOIN logistica.item as it
				ON asn.itemcode = it.sku
				WHERE it.id IS NULL
			]]>
		</sql-query>

		<sql-query name="doCheckDeliveryLocationExists">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber, 
				'Línea ' || asn.rownumber || ': El local de destino código ' || asn.locationcode || ' no existe en el sistema'
				FROM asnupload as asn
				LEFT JOIN logistica.location as loc
				ON asn.locationcode = loc.code
				WHERE loc.id IS NULL
			]]>
		</sql-query>

		<sql-query name="doCheckOCItemLocalOnDelivery">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,  
				'Línea ' || asn.rownumber || ': La combinación de Orden de compra - Producto - Local Destino no existe en el despacho'
				FROM asnupload as asn
				LEFT JOIN logistica.dvrorderdeliverydetail as dvrodd
				on dvrodd.dvrorder_id = asn.dvrorder_id
				AND dvrodd.dvrdelivery_id = asn.dvrdelivery_id
				AND dvrodd.item_id = asn.item_id
				AND dvrodd.location_id = asn.location_id 
				WHERE dvrodd.dvrorder_id IS NULL
			]]>
		</sql-query>

		<sql-query name="doCheckUnits">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber, 
				'Fila ' || asn.rownumber || ': La cantidad indicada debe ser mayor que cero'
				FROM asnupload as asn
				WHERE units <= 0
			]]>
		</sql-query>

		<sql-query name="doCheckOCItemLocationUnits">
			<![CDATA[
				WITH foo as (
    				SELECT asn.ordernumber, asn.itemcode, asn.locationcode, 
                    asn.dvrorder_id, asn.dvrdelivery_id, asn.item_id, asn.location_id,
                    SUM(asn.units) as units 
    				FROM asnupload as asn
    				GROUP BY asn.ordernumber, asn.itemcode, asn.locationcode, asn.dvrorder_id, asn.dvrdelivery_id, asn.item_id, asn.location_id
				),
                foo2 as (
                    SELECT foo.ordernumber, foo.itemcode, foo.locationcode, SUM(foo.units) as units , SUM(dvrodd.availableunits) as availableunits
    				FROM foo
    				JOIN logistica.dvrorderdeliverydetail AS dvrodd
    				ON dvrodd.dvrorder_id = foo.dvrorder_id
    				AND dvrodd.dvrdelivery_id = foo.dvrdelivery_id
    				AND foo.item_id = dvrodd.item_id
    				AND foo.location_id = dvrodd.location_id
    				GROUP BY foo.ordernumber, foo.itemcode, foo.locationcode, dvrodd.dvrorder_id, dvrodd.item_id, dvrodd.location_id
                
                )
				INSERT INTO asnerror (line, error)
				SELECT 0, 'No puede asignar unidades mayores a lo solicitado (Orden ' || foo2.ordernumber || ', Producto ' || foo2.itemcode || ', Local ' || foo2.locationcode || ')'
				FROM foo2
				WHERE units > availableunits
			]]>
		</sql-query>


		<sql-query name="doCheckLPNFormatTotalLength">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,
				'Linea ' || asn.rownumber || ', El LPN informado no cumple con el formato definido (Largo no corresponde)'
				FROM asnupload as asn
				WHERE LENGTH(asn.lpnnumber) != :bulktotallength
			]]>
		</sql-query>

		<sql-query name="doCheckLPNFormatStartsWith">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,
				'Linea ' || asn.rownumber || ', El LPN informado no cumple con el formato definido (Código Fijo no empieza en ' || :prefixvalue || ')'
				FROM asnupload as asn
				WHERE substring(asn.lpnnumber from :prefixsince for :prefixlength) != :prefixvalue
			]]>
		</sql-query>

		<sql-query name="doCheckLPNFormatVendorCode">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					asn.rownumber, 
					'Línea ' || asn.rownumber || ': El LPN informado no cumple con el formato definido (Código de proveedor no existe)'
				FROM
					asnupload AS asn LEFT JOIN
					logistica.vendor AS ve ON SUBSTRING(asn.lpnnumber FROM :lpnvendorsince FOR :lpnvendorlength) = LPAD(ve.code, 8, '0')
				WHERE
					ve.id IS NULL
			]]>
		</sql-query>

		<sql-query name="doCheckLPNFormatSerialLength">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber, 
				'Línea ' || asn.rownumber || ': El LPN informado no cumple con el formato definido (Largo del correlativo)'
				FROM asnupload as asn
				WHERE LENGTH(substring(asn.lpnnumber from :lpnserialsince)) != :lpnseriallength			
			]]>
		</sql-query>
		
		<sql-query name="doCheckLPNFormatSerialType">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					asn.rownumber, 
					'Línea ' || asn.rownumber || ': El correlativo asociado al LPN no es un número entero'
				FROM
					asnupload AS asn
				WHERE
					SUBSTRING(asn.lpnnumber FROM :lpnserialsince) !~ '^[0-9]+$'
			]]>
		</sql-query>
		
		<sql-query name="doCheckLPNFormatSerialValue">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					asn.rownumber, 
					'Línea ' || asn.rownumber || ': El correlativo asociado al LPN debe ser mayor al informado'
				FROM
					asnupload AS asn
				WHERE
					CAST(SUBSTRING(asn.lpnnumber FROM :lpnserialsince) AS INTEGER) <= :mincorrelative
			]]>
		</sql-query>
		
		<sql-query name="doCheckLPNVendorCodeRelated">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					asn.rownumber, 
					'Línea ' || asn.rownumber || ': El proveedor asociado al LPN no coincide con informado en la orden'
				FROM
					asnupload AS asn JOIN
					logistica.vendor AS ve ON SUBSTRING(asn.lpnnumber FROM :lpnvendorsince FOR :lpnvendorlength) = LPAD(ve.code, 8, '0')
				WHERE
					ve.code != :vendorcode
			]]>
		</sql-query>

		<sql-query name="doCheckExistsLPN">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT asn.rownumber,  'Fila ' ||  asn.rownumber || ': LPN ya existe en el sistema '
				FROM asnupload as asn
				JOIN logistica.bulk as bu
				ON bu.lpncode =  asn.lpnnumber
			]]>
		</sql-query>

		<sql-query name="doCheckUniqueLPNOC">
			<![CDATA[
				WITH foo AS (
					SELECT distinct asn.lpnnumber, asn.ordernumber
					FROM asnupload as asn			
				)
				INSERT INTO asnerror (line, error)
				SELECT 0, 'El LPN ' || foo.lpnnumber || ' tiene productos asociados a más de una orden de compra '
				from foo
				GROUP BY foo.lpnnumber
				HAVING COUNT(foo.ordernumber) > 1
			]]>
		</sql-query>

		<sql-query name="doCheckUniqueLPNDocument">
			<![CDATA[
				WITH foo AS (
					SELECT distinct asn.lpnnumber, asn.documentnumber
					FROM asnupload as asn			
				)
				INSERT INTO asnerror (line, error)
				SELECT 0, 'El LPN ' || foo.lpnnumber || ' tiene productos asociados a distintos documentos '
				from foo
				GROUP BY foo.lpnnumber
				HAVING COUNT(foo.documentnumber) > 1
			]]>
		</sql-query>

		<sql-query name="doCheckUniqueLPNLocation">
			<![CDATA[
				WITH foo AS (
					SELECT distinct asn.lpnnumber, asn.locationcode
					FROM asnupload as asn			
				)
				INSERT INTO asnerror (line, error)
				SELECT 0, 'El LPN ' || foo.lpnnumber || ' está asociado a más de un local de destino '
				from foo
				GROUP BY foo.lpnnumber
				HAVING COUNT(foo.locationcode) > 1
			]]>
		</sql-query>

		<sql-query name="doCheckUniqueSKUByLPN">
			<![CDATA[			
				with foo as (
					select
					distinct asn.lpnnumber, asn.itemcode
					from asnupload as asn
					join logistica.order as oc
					ON asn.dvrorder_id = oc.id
					join logistica.ordertype as ot
					ON ot.id = oc.ordertype_id
					where ot.code IN (:ordertypefilter)
				)
				INSERT INTO asnerror (line, error)
				SELECT 0, 'El LPN ' || foo.lpnnumber || ' contiene más de un producto asociado'
				from foo
				GROUP BY foo.lpnnumber
				HAVING COUNT(foo.itemcode) > 1			
			]]>
		</sql-query>

		<sql-query name="doCheckDocumentType">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					asn.rownumber,
					'Línea ' ||  asn.rownumber || ': El tipo de documento con código ' || asn.documenttype || ' no existe en el sistema'
				FROM
					asnupload AS asn LEFT JOIN
					logistica.documenttype AS dt ON dt.code = asn.documenttype
				WHERE
					dt.id IS NULL
			]]>
		</sql-query>

		<sql-query name="doCheckDocumentNumberTypeVendorNotExists">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					asn.rownumber,
					'Línea ' ||  asn.rownumber || ': Ya existe un número de documento ' || asn.documentnumber || ' para el tipo de documento ' || asn.documenttype ||
												  ' y el proveedor de RUT ' || vd.code || ' en el sistema'
				FROM
					asnupload AS asn JOIN
					logistica.document AS doc ON doc.number = asn.documentnumber JOIN
					logistica.documenttype AS dt ON dt.id = doc.documenttype_id JOIN
					logistica.bulk AS bu ON bu.document_id = doc.id JOIN
					logistica.dvrdelivery AS dvrd ON dvrd.id = bu.dvrdelivery_id JOIN
					logistica.vendor AS vd ON vd.id = dvrd.vendor_id
				WHERE
					dt.code = asn.documenttype AND vd.code = :vendorcode
			]]>
		</sql-query>

		<sql-query name="doCheckUniqueDocumentNumberTypeOCUnique">
			<![CDATA[
				WITH foo AS (
					SELECT distinct asn.ordernumber, asn.documentnumber, asn.documenttype
					FROM asnupload as asn			
				)
				INSERT INTO asnerror (line, error)
				SELECT 0, 'La combinación número de documento ' || foo.documentnumber || ' y tipo ' || foo.documenttype || ' está asociada a más de una orden de compra' 
				from foo
				GROUP BY foo.documentnumber, foo.documenttype
				HAVING COUNT(foo.ordernumber) > 1			
			]]>
		</sql-query>
		
		<sql-query name="doAddDocumentFromAsnData">
			<![CDATA[
				INSERT INTO logistica.document (number, validated, documenttype_id, closed, status)
				SELECT DISTINCT
					documentnumber,
					false,
					documenttype_id,
					false,
					false
				FROM
					asnupload
			]]>
		</sql-query>

		<sql-query name="doFillDocumentid">
			<![CDATA[
				UPDATE asnupload AS asn
				SET
					document_id = doc.id
				FROM
					logistica.document AS doc LEFT JOIN
					logistica.bulk AS bu ON bu.document_id = doc.id
				WHERE
					asn.documentnumber = doc.number AND asn.documenttype_id = doc.documenttype_id AND bu.document_id IS NULL
			]]>
		</sql-query>
		
		<sql-query name="doCheckDocumentExists">
			<![CDATA[
				INSERT INTO asnerror (line, error)
				SELECT
					rownumber, 
					'Fila ' || rownumber || ': Error del sistema agregando el documento ' || documentnumber
				FROM
					asnupload
				WHERE
					document_id IS NULL
			]]>
		</sql-query>
		
		<sql-query name="doUpdateDocumentFromAsnData">
			<![CDATA[
				WITH foo AS(
						SELECT
							asn.document_id,
							ROUND(SUM(od.finalcost * asn.units)) AS netamount,
							ROUND(SUM(od.finalcost * asn.units) * :iva) AS iva,
							ROUND(SUM(od.finalcost * asn.units) * (1.0 + :iva)) AS totalamount
						FROM
							asnupload AS asn JOIN
							logistica.dvrorderdetail AS od ON od.dvrorder_id = asn.dvrorder_id AND od.item_id = asn.item_id AND od.position = asn.position
						GROUP BY
							asn.document_id)
				UPDATE logistica.document AS doc
				SET
					netamount = foo.netamount,
					iva = foo.iva,
					totalamount = foo.totalamount 
				FROM
					foo
				WHERE
					foo.document_id = doc.id
			]]>
		</sql-query>

		<sql-query name="doAddBulkFromAsnData">
			<![CDATA[
				INSERT INTO logistica.bulk (lpncode, totalunits, dvrdelivery_id, active, document_id)
				SELECT
					lpnnumber,
					SUM(units),
					dvrdelivery_id,
					true,
					document_id
				FROM
					asnupload
				GROUP BY
					lpnnumber, dvrdelivery_id, document_id
		 	]]>
		</sql-query>

		<sql-query name="doFillBulkId">
			<![CDATA[
				UPDATE asnupload AS asn 
				SET
					bulk_id = bu.id
				FROM
					logistica.bulk AS bu
				WHERE
					asn.lpnnumber = bu.lpncode AND asn.dvrdelivery_id = bu.dvrdelivery_id AND asn.document_id = bu.document_id
			]]>
		</sql-query>

		<sql-query name="doAddBulkDetailFromAsnData">
			<![CDATA[
				INSERT INTO logistica.bulkdetail(bulk_id, dvrdelivery_id, dvrorder_id, item_id, location_id, position, units)
				SELECT asn.bulk_id, asn.dvrdelivery_id, asn.dvrorder_id, asn.item_id, asn.location_id, asn.position, asn.units 
				FROM asnupload as asn
			]]>
		</sql-query>

		<sql-query name="doSetAvailableInDvrOrderDeliveryDetail">
			<![CDATA[
				WITH foo AS(
					SELECT dvrod.dvrorder_id, dvrod.dvrdelivery_id, dvrodd.availableunits
					FROM logistica.dvrorderdelivery as dvrod,
					logistica.dvrorderdeliverydetail as dvrodd
					WHERE dvrodd.dvrorder_id = dvrod.dvrorder_id
					AND dvrodd.dvrdelivery_id = dvrod.dvrdelivery_id
					AND dvrod.dvrdelivery_id = :dvrdeliveryid
				)
				UPDATE logistica.dvrorderdeliverydetail as dvrodd
				SET availableunits = :newvalue
				FROM foo
				WHERE dvrodd.dvrorder_id = foo.dvrorder_id
				AND dvrodd.dvrdelivery_id = foo.dvrdelivery_id
			]]>
		</sql-query>

		<sql-query name="doUpdateAvailableInDvrOrderDeliveryDetail">
			<![CDATA[
			 	WITH foo as ( 
					SELECT dvrorder_id, dvrdelivery_id, item_id, position, location_id, sum(units) as units 
				 	FROM asnupload
				 	GROUP BY dvrorder_id, dvrdelivery_id, item_id, position, location_id 
 				)  
				UPDATE logistica.dvrorderdeliverydetail as dvrodd  
				SET availableunits = foo.units 
				FROM foo 
				WHERE 
				dvrodd.dvrdelivery_id = foo.dvrdelivery_id
				AND dvrodd.dvrorder_id = foo.dvrorder_id 
				AND dvrodd.item_id = foo.item_id 
				AND dvrodd.position = foo.position
				AND dvrodd.location_id = foo.location_id;
			]]>		
		</sql-query>
		
		<sql-query name="doCloseNotIncludedOrderDeliveries">
			<![CDATA[
				UPDATE logistica.dvrorderdelivery  
				SET closed = TRUE 
				WHERE
					dvrdelivery_id = :dvrdeliveryid AND dvrorder_id NOT IN (SELECT DISTINCT
																				dvrorder_id
																			FROM
																				asnupload);
			]]>		
		</sql-query>

	</class>
</hibernate-mapping>
