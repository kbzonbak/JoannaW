<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Mapping file autogenerated by MyEclipse Persistence Tools -->
<hibernate-mapping>
	<class name="bbr.b2b.logistic.items.entities.Item" table="ITEM"
		entity-name="bbr.b2b.logistic.items.entities.Item" schema="LOGISTICA">
		<id name="id" type="java.lang.Long">
			<column name="ID" />
			<generator class="identity">
				<param name="sequence">ITEM_SEQUENCE</param>
				<param name="parameters">AS BIGINT CACHE 100</param>
			</generator>
		</id>

		<property name="sku" type="java.lang.String" column="SKU"
			length="250" />
		<property name="name" type="java.lang.String" column="NAME"
			length="250" />
		<property name="umc_cd_vendor" type="java.lang.Double"
			column="umc_cd_vendor" length="250" />
		<property name="umc_location_vendor" type="java.lang.Double"
			column="umc_location_vendor" length="250" />
		<property name="umd_cd_location" type="java.lang.Double"
			column="umd_cd_location" length="250" />
		<property name="umd_vendor_cd" type="java.lang.Double"
			column="umd_vendor_cd" length="250" />
		<property name="umd_vendor_location" type="java.lang.Double"
			column="umd_vendor_location" length="250" />
		<property name="curve" type="java.lang.String" column="curve"
			length="250" />
		<property name="itemcode" type="java.lang.String" column="itemcode"
			length="250" />


		<sql-query name="doCreateTempTableStock">
     		<![CDATA[
     			CREATE TEMP TABLE stockupload (
			 		line INTEGER,
			 		warehouse VARCHAR,
			 		sku VARCHAR,
			 		description VARCHAR,
			 		availablestock INTEGER,
			 		dailystock INTEGER
				) ON COMMIT DROP;
     		]]>
		</sql-query>

		<sql-query name="doCreateTempTableError">
     		<![CDATA[
     			CREATE TEMP TABLE uploaderror ( 
					line INTEGER,
					error VARCHAR
				) ON COMMIT DROP;
     		]]>
		</sql-query>

		<sql-query name="doCheckDocumentData">
     		<![CDATA[
     		    INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					'Se debe indicar un valor en la columna Código SKU '
					FROM 
						stockupload as up
					WHERE 
						up.sku IS NULL
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;
				
				INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					'Se debe indicar un valor en la columna Stock Disponible '
					FROM 
						stockupload as up
					WHERE 
						up.availablestock IS NULL
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;
					
				INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					'Se debe indicar un valor en la columna Reposición Diaria '
					FROM 
						stockupload as up
					WHERE 
						up.dailystock IS NULL
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;
				
				INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					' El valor asociado a la columna Stock Disponible debe ser numérico e igual o mayor a cero '
					FROM 
						stockupload as up
					WHERE
						CAST (COALESCE(up.availablestock, '0') AS INTEGER) < 0
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;
					
				INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					' El valor asociado a la columna Reposición Diaria debe ser numérico e igual o mayor a cero '
					FROM 
						stockupload as up
					WHERE
						CAST (COALESCE(up.dailystock, '0') AS INTEGER) < 0
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;
				
				INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					' Ambos valores de stock no pueden ser mayores a cero '
					FROM 
						stockupload as up
					WHERE
						up.dailystock > 0 AND up.availablestock > 0
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;

				WITH warehouseItemCount AS(
						SELECT
							warehouse,
							sku,
							COUNT(*)
						FROM
							stockupload
						GROUP BY
							warehouse, sku
						HAVING COUNT(*) > 1)
				INSERT INTO uploaderror (line, error)
					SELECT 
						up.line, 
	 					' Combinación de bodega-productos existente en al menos una fila anterior '
					FROM 
						warehouseItemCount AS wic JOIN stockupload up ON (up.warehouse = wic.warehouse AND up.sku = wic.sku) 
					GROUP BY
						up.line, up.warehouse,  up.sku, up.description, up.availablestock, up.dailystock
					ORDER BY
						up.line;				
     		]]>
		</sql-query>
		
		<sql-query name="doCleanErrorRowsFromStockUpload">
	     	<![CDATA[
				DELETE FROM stockupload
				WHERE
					line IN (SELECT
								line
							 FROM
							 	uploaderror);
			]]>
		</sql-query>

	</class>
</hibernate-mapping>
