<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
	Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
	<class name="bbr.b2b.logistic.dvrdeliveries.entities.DvrDelivery" table="DVRDELIVERY" 
		entity-name="bbr.b2b.logistic.dvrdeliveries.entities.DvrDelivery" schema="LOGISTICA">
		<id name="id" type="java.lang.Long">
			<column name="ID" />
			<generator class="identity">
				<param name="sequence">DVRDELIVERY_SEQUENCE</param>
				<param name="parameters">AS BIGINT CACHE 100</param>
			</generator>
		</id>

		<property name="number" type="java.lang.Long" not-null="true"/>
		<property name="created" type="java.time.LocalDateTime" not-null="true"/>
		<property name="currentstatetypedate" type="java.time.LocalDateTime"/>
		<property name="pluploaddate" type="java.time.LocalDateTime"/>
		
		<many-to-one name="currentstatetype"
			class="bbr.b2b.logistic.dvrdeliveries.entities.DvrDeliveryStateType" column="CURRENTSTATETYPE_ID"
			not-null="true"/>
		
		<many-to-one name="vendor"
			class="bbr.b2b.logistic.vendors.entities.Vendor" column="VENDOR_ID"
			not-null="true"/>
		

		<many-to-one name="deliverylocation"
			class="bbr.b2b.logistic.locations.entities.Location" column="DELIVERYLOCATION_ID"
			not-null="false"/>			
					
		<!-- ************************************************************************************** -->
     	<!-- **************** SET DE QUERIES USADAS PARA CARGA AJUSTE DE UNIDADES ***************** -->
     	<!-- ************************************************************************************** -->
			
		<sql-query name="doCreateAdjustTempTable">
			<![CDATA[
			    CREATE TEMP TABLE adjustupload (
					rownumber INTEGER,
					ordernumber BIGINT,
					destinationlocationcode VARCHAR,
					itemsku VARCHAR,
					availableunits DOUBLE PRECISION,
					dvrorder_id BIGINT,
					dvrdelivery_id BIGINT,
					location_id BIGINT,
					item_id BIGINT,
					position INTEGER
				) ON COMMIT DROP;
			
			]]>
		</sql-query>
			
     	<sql-query name="doCreateAdjustTempErrorTable">
     		<![CDATA[
     			CREATE TEMP TABLE adjusterror ( 
					line INTEGER,
					error VARCHAR
				) ON COMMIT DROP;
     		]]>
     	</sql-query>
     	
     	<sql-query name="getDvrOrderIdsFromAdjustUnitsData">
			<![CDATA[
				SELECT DISTINCT
					dvrorder_id 
				FROM
					adjustupload
			]]>
		</sql-query>
     	
		<sql-query name="doFillOrderData">
			<![CDATA[
				UPDATE
					adjustupload AS adj
				SET
					dvrorder_id = ot.id
				FROM
					logistica.order AS oc JOIN
					logistica.dvrorder AS ot ON ot.id = oc.id 
				WHERE
					oc.number = adj.ordernumber
			]]>
		</sql-query>
					
		<sql-query name="doFillDestinationLocationData">
			<![CDATA[
				UPDATE
					adjustupload AS adj
				SET
					location_id = lo.id
				FROM
					logistica.location AS lo
				WHERE
					lo.code = adj.destinationlocationcode
			]]>
		</sql-query>
		
		<sql-query name="doFillItemData">
			<![CDATA[
				UPDATE
					adjustupload AS adj
				SET
					item_id = it.id
				FROM
					logistica.item AS it
				WHERE
					it.sku = adj.itemsku	
			]]>
		</sql-query>
		
		<sql-query name="doFillDeliveryData">
			<![CDATA[
				UPDATE
					adjustupload
				SET
					dvrdelivery_id = :dvrdeliveryid
			]]>
		</sql-query>

		<sql-query name="doFillDvrOrderDeliveryDetailPosition">
			<![CDATA[
				UPDATE
					adjustupload AS adj
				SET
					position = odd.position
				FROM
					logistica.dvrorderdeliverydetail AS odd JOIN
					logistica.dvrorder AS ot ON ot.id =  odd.dvrorder_id JOIN
					logistica.order AS oc ON oc.id = ot.id JOIN
					logistica.location AS lo ON lo.id = odd.location_id JOIN
					logistica.item AS it ON it.id = odd.item_id
				WHERE
					oc.number = adj.ordernumber AND lo.code = adj.destinationlocationcode AND it.sku = adj.itemsku AND odd.dvrdelivery_id = :dvrdeliveryid
			]]>
     	</sql-query>
     	
     	<sql-query name="doCheckUniqueRows">
			<![CDATA[
				WITH foo AS(
						SELECT
							ordernumber,
							destinationlocationcode,
							itemsku,
							COUNT(rownumber) AS rows,
							ARRAY_TO_STRING(ARRAY_AGG(rownumber), ', ') AS message
						FROM
							adjustupload
						GROUP BY
							ordernumber, destinationlocationcode, itemsku)
				INSERT INTO adjusterror (line, error)
				SELECT
					0,
					'Filas ' || message || ': Filas repetidas'
				FROM
					foo
				WHERE
					rows > 1
			]]>
		</sql-query>

		<sql-query name="doCheckOrders">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					rownumber,
					'Fila ' || rownumber || ': La orden de compra N° ' || ordernumber || ' no existe'
				FROM
					adjustupload 
				WHERE
					dvrorder_id IS NULL
			]]>
		</sql-query>
	
		<sql-query name="doCheckDestinationLocations">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					rownumber,
					'Fila ' || rownumber || ': El local ' || destinationlocationcode || ' no existe'
				FROM
					adjustupload
				WHERE
					location_id IS NULL
			]]>
		</sql-query>
		
		<sql-query name="doCheckItems">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					rownumber,
					'Fila ' || rownumber || ': El producto ' || itemsku || ' no existe'
				FROM
					adjustupload
				WHERE
					item_id IS NULL
			]]>
		</sql-query>
		
		<sql-query name="doCheckDvrOrderDeliveryDetails">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					rownumber,
					'Fila ' || rownumber || ': No existe este detalle en la entrega'
				FROM
					adjustupload
				WHERE
					position IS NULL
			]]>
		</sql-query>
		
		<sql-query name="doCheckUnitsEqualOrGreaterThanZero">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					rownumber,
					'Fila ' || rownumber || ': La cantidad indicada debe ser mayor o igual a cero'
				FROM
					adjustupload
				WHERE
					availableunits < 0
			]]>
		</sql-query>

		<sql-query name="doCheckUnitsEqualOrLessThanPendingDeliveryDetails">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					adj.rownumber,
					'Fila ' || adj.rownumber || ': La cantidad indicada sobrepasa lo pendiente para ese detalle en la entrega'
				FROM
					adjustupload AS adj JOIN
					logistica.dvrorderdeliverydetail AS odd ON odd.dvrorder_id = adj.dvrorder_id AND odd.dvrdelivery_id = adj.dvrdelivery_id AND
															   odd.location_id = adj.location_id AND odd.item_id = adj.item_id AND
															   odd.position = adj.position
				WHERE
					adj.availableunits > odd.pendingunits
			]]>
		</sql-query>

		<sql-query name="doCheckUnitsEqualOrLessThanPendingPredeliveryDetails">
			<![CDATA[
				INSERT INTO adjusterror (line, error)
				SELECT
					adj.rownumber,
					'Fila ' || adj.rownumber || ': Las unidades asociadas al producto ' || adj.itemsku || ' para el local ' || adj.destinationlocationcode ||
												' sobrepasan lo pendiente para la pre distribución de la orden de compra ' || adj.ordernumber
				FROM
					adjustupload AS adj JOIN
					logistica.dvrpredeliverydetail AS pdd ON pdd.dvrorder_id = adj.dvrorder_id AND pdd.location_id = adj.location_id AND
															 pdd.item_id = adj.item_id AND pdd.position = adj.position JOIN
					logistica.dvrorderdeliverydetail AS odd ON odd.dvrorder_id = pdd.dvrorder_id AND odd.dvrdelivery_id = adj.dvrdelivery_id AND
															   odd.location_id = pdd.location_id AND odd.item_id = pdd.item_id AND
															   odd.position = pdd.position
				WHERE
					adj.availableunits - odd.availableunits > pdd.pendingunits
			]]>
		</sql-query>
		
		<sql-query name="doUpdateDvrOrderDeliveryDetails">
			<![CDATA[
				UPDATE
					logistica.dvrorderdeliverydetail AS odd
				SET
					availableunits = adj.availableunits
				FROM
					adjustupload AS adj
				WHERE
					odd.dvrorder_id = adj.dvrorder_id AND odd.dvrdelivery_id = adj.dvrdelivery_id AND
					odd.location_id = adj.location_id AND odd.item_id = adj.item_id AND odd.position = adj.position
			]]>
		</sql-query>
																			
	</class>
</hibernate-mapping>
