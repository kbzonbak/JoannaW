package bbr.b2b.logistic.managers.interfaces;

import bbr.b2b.common.adtclasses.classes.BaseResultDTO;
import bbr.b2b.common.adtclasses.classes.PageRangeDTO;
import bbr.b2b.common.adtclasses.exceptions.AccessDeniedException;
import bbr.b2b.common.adtclasses.exceptions.NotFoundException;
import bbr.b2b.common.adtclasses.exceptions.OperationFailedException;
import bbr.b2b.logistic.ddcdeliveries.report.classes.DdcDeliveryAddInitParamDTO;
import bbr.b2b.logistic.ddcdeliveries.report.classes.DdcDeliveryAddResultDTO;
import bbr.b2b.logistic.ddcorders.data.wrappers.DdcOrderW;
import bbr.b2b.logistic.ddcorders.report.classes.DdcFileArrayResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcFileInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderDeliveryStateReportResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderDetailExcelReportResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderDetailReportInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderDetailReportResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderExcelReportInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderExcelReportResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderIdsByPagesDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderReportInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderReportResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrderStateTypeArrayResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.DdcOrdersVendorInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.RejectDDCOrdersInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.RejectDDCOrdersResultDTO;
import bbr.b2b.logistic.ddcorders.report.classes.RescheduleDateDDCOrdersInitParamDTO;
import bbr.b2b.logistic.ddcorders.report.classes.RescheduleDateDDCOrdersResultDTO;
import bbr.b2b.logistic.dvrorders.data.wrappers.DvrOrderW;
import bbr.b2b.logistic.dvrorders.report.classes.ChargeDiscountByOrderDetailInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.ChargeDiscountResultReportDTO;
import bbr.b2b.logistic.dvrorders.report.classes.CheckDVHOrdersExecuteActionsResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DiscountByOrderInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DiscountByOrderResultReportDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvhOrderDetailExcelReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvhOrderDetailReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvhOrderDetailReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvhOrderExcelReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvhOrderReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvhOrderReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderDetailExcelReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderDetailReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderDetailReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderExcelReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderExcelReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderIdsByPagesDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderLabelArrayResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderPdfReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderPdfReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrderStateTypeResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrOrdersVendorInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrPredeliveryDetailExcelReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrPredeliveryDetailReportInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.DvrPredeliveryDetailReportResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.RejectDVHOrdersInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.RejectDVHOrdersResultDTO;
import bbr.b2b.logistic.dvrorders.report.classes.RescheduleDateDVHOrdersInitParamDTO;
import bbr.b2b.logistic.dvrorders.report.classes.RescheduleDateDVHOrdersResultDTO;
import bbr.b2b.logistic.report.classes.UserLogDataDTO;

public interface IBuyOrderReportManager {

	public DvrOrderW doAcceptDvrOrder(Long dvrorderid, String username, String usertype) throws NotFoundException, OperationFailedException, AccessDeniedException;
	public void doAcceptDvrOrders(Long[] dvrorderids, String username, String usertype) throws NotFoundException, OperationFailedException, AccessDeniedException;
	public void doCalculateTotalOfDvrOrders(Long[] dvrorderids)  throws NotFoundException, AccessDeniedException, OperationFailedException;
	public DvrOrderStateTypeResultDTO getDvrOrderStateTypes();
	public DvrOrderReportResultDTO getDvrOrderReportByVendorAndFilter(DvrOrderReportInitParamDTO initParamDTO, boolean withTotals, boolean isPaginated);
	public DvrOrderExcelReportResultDTO getDvrOrdersExcelReportByOrders(DvrOrderExcelReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean isByPages);
	public DvhOrderExcelReportResultDTO getDvhOrdersExcelReportByOrders(DvrOrderExcelReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean isByPages);
	public DvrOrderPdfReportResultDTO getPdfDvrOrderReportByOrders(DvrOrderPdfReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean isByPages);
	public DvrOrderIdsByPagesDTO getDvrOrderIdsByPages(DvrOrderReportInitParamDTO initParamDTO, PageRangeDTO[] pageRangeDTO);
	public DvrOrderLabelArrayResultDTO getDvrOrderLabelsByOrders(DvrOrderExcelReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean isByPages);
	public DvrOrderDetailReportResultDTO getDvrOrderDetailByOrder(DvrOrderDetailReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean withTotals, boolean isPaginated);
	public DvrOrderDetailExcelReportResultDTO getDvrOrderDetailExcelReportByOrder(DvrOrderDetailReportInitParamDTO initParamDTO);
	public DvhOrderDetailExcelReportResultDTO getDvhOrderDetailExcelReportByOrder(DvrOrderDetailReportInitParamDTO initParamDTO);
	public DvrPredeliveryDetailReportResultDTO getDvrPredeliveryDetailByOrder(DvrPredeliveryDetailReportInitParamDTO initParamDTO, boolean withTotals, boolean isPaginated);
	public DvrPredeliveryDetailExcelReportResultDTO getDvrPredeliveryDetailExcelReportByOrder(DvrPredeliveryDetailReportInitParamDTO initParamDTO);
	public DiscountByOrderResultReportDTO getDiscountByOrder(DiscountByOrderInitParamDTO initParamDTO);
	public ChargeDiscountResultReportDTO getChargeDiscountByOrderDetail(ChargeDiscountByOrderDetailInitParamDTO initParamDTO);
	
	public DdcOrderW doAcceptDdcOrder(Long ddcorderid, String username, String usertype, String comment) throws NotFoundException, OperationFailedException, AccessDeniedException;
	public void doAcceptDdcOrders(Long[] ddcorderids, String username, String usertype, String comment) throws NotFoundException, OperationFailedException, AccessDeniedException;
	public void doCalculateTotalOfDdcOrders(Long[] ddcorderids)  throws NotFoundException, AccessDeniedException, OperationFailedException;
	public DdcOrderStateTypeArrayResultDTO getDdcOrderStateTypes();
	public DdcOrderReportResultDTO getDdcOrderReportByVendorAndFilter(DdcOrderReportInitParamDTO initParamDTO, boolean withTotals, boolean isPaginated);
	public DdcOrderExcelReportResultDTO getDdcOrdersExcelReportByOrders(DdcOrderExcelReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean isByPages);
	public DdcOrderIdsByPagesDTO getDdcOrderIdsByPages(DdcOrderReportInitParamDTO initParamDTO, PageRangeDTO[] pageRangeDTO);
	public DdcOrderDetailReportResultDTO getDdcOrderDetailByDdcOrder(DdcOrderDetailReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean withTotals, boolean isPaginated);
	public DdcOrderDetailExcelReportResultDTO getDdcOrderDetailExcelReportByOrder(DdcOrderDetailReportInitParamDTO initParamDTO);
	public DdcOrderDeliveryStateReportResultDTO getDdcOrderDeliveryStateByDdcOrder(DdcOrderDetailReportInitParamDTO initParamDTO, boolean isPaginated);
	public DdcDeliveryAddResultDTO doAddDdcDeliveryOfDdcOrders(DdcDeliveryAddInitParamDTO initParamDTO, UserLogDataDTO userDataDTO);
	public DdcFileArrayResultDTO getDdcFilesByDdcOrders(DdcFileInitParamDTO initParamDTO);
	public DdcOrderIdsByPagesDTO getDdcFileOrderIdsByPages(DdcOrderReportInitParamDTO initParamDTO, PageRangeDTO[] pageRangeDTO);
	
	public DvhOrderReportResultDTO getDvhOrderReportByVendorAndFilter(DvhOrderReportInitParamDTO initParamDTO, boolean withTotals, boolean isPaginated);
	public DvrOrderIdsByPagesDTO getDvhOrderIdsByPages(DvhOrderReportInitParamDTO initParamDTO, PageRangeDTO[] pageRangeDTO);
	public DvhOrderDetailReportResultDTO getDvhOrderDetailByOrder(DvhOrderDetailReportInitParamDTO initParamDTO, UserLogDataDTO userDataDTO, boolean providerUser, boolean withTotals, boolean isPaginated);
	public CheckDVHOrdersExecuteActionsResultDTO doCheckDVHOrdersExecuteActions(DvrOrdersVendorInitParamDTO initParamDTO);
	public RescheduleDateDVHOrdersResultDTO doRescheduleDateToDVHOrders(RescheduleDateDVHOrdersInitParamDTO initParamDTO, UserLogDataDTO userDataDTO);
	public RejectDVHOrdersResultDTO doRejectDVHOrders(RejectDVHOrdersInitParamDTO initParamDTO, UserLogDataDTO userDataDTO);

	public BaseResultDTO doCheckDDCOrdersExecuteActions(DdcOrdersVendorInitParamDTO initParamDTO);
	public RescheduleDateDDCOrdersResultDTO doRescheduleDateToDDCOrders(RescheduleDateDDCOrdersInitParamDTO initParamDTO,  UserLogDataDTO userDataDTO);
	public RejectDDCOrdersResultDTO doRejectDDCOrders(RejectDDCOrdersInitParamDTO initParamDTO, UserLogDataDTO userDataDTO);
}
